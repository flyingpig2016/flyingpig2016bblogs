[{"title":"gulp的实时刷新、代码压缩、代码排错","date":"2017-07-10T04:33:00.000Z","path":"2017/07/10/gulp的实时刷新、代码压缩、代码排错/","content":"<h2 id=\"gulp的学习\"><a href=\"#gulp的学习\" class=\"headerlink\" title=\"gulp的学习\"></a>gulp的学习</h2><h3 id=\"一：什么是gulp？\"><a href=\"#一：什么是gulp？\" class=\"headerlink\" title=\"一：什么是gulp？\"></a>一：什么是gulp？</h3><p>&emsp;&emsp;简而言之，gulp是一种工具，是一种前端工具，是一种在前端开发过程中对代码进行构建的工具。<br>作用：对网站资源优化，比之前流行的工具grunt构建项目过程重复率低，可以愉快的编写代码。<br>具体作用：网页自动刷新、CSS预处理、代码检测、压缩图片、等等…… 只需用简单的命令就能全部完成，让你把重点放在功能开发上；同时减少人为失误，提高开发效率和项目质量，让专注更为专注。</p>\n<h3 id=\"二：为什么使用Gulp而不使用Grunt\"><a href=\"#二：为什么使用Gulp而不使用Grunt\" class=\"headerlink\" title=\"二：为什么使用Gulp而不使用Grunt?\"></a>二：为什么使用Gulp而不使用Grunt?</h3><ul>\n<li>简洁：Gulp侧重“代码优于配置”(code over configuration)。最直观的感受，更为简单和清晰，不需要像Grunt一样写一堆庞大的配置文件。</li>\n<li>高效：Gulp基于Node Streams（流）来构建任务，避免磁盘反复I/O（读取/写入）。每个任务都是单独执行（坚持做一件事并且做好它），这使得它速度更快、更为纯粹。</li>\n<li>易学：Gulp核心API只有4个。简洁的API易于上手，学习过程比较平滑。<h3 id=\"三：gulp核心API用法？\"><a href=\"#三：gulp核心API用法？\" class=\"headerlink\" title=\"三：gulp核心API用法？\"></a>三：gulp核心API用法？</h3></li>\n<li>gulp.src(globs[, options])：指明源文件路径<br>  globs：路径模式匹配；<br>  options：可选参数；  </li>\n<li>gulp.dest(path[, options])：指明处理后的文件输出路径<br>  path：路径（一个任务可以有多个输出路径）；<br>  options：可选参数；</li>\n<li>gulp.task(name[, deps], fn)：注册任务<br>  name：任务名称（通过 gulp name 来执行这个任务）；<br>  deps：可选的数组，在本任务运行中所需要所依赖的其他任务（当前任务在依赖任务执行完毕后才会执行）；<br>  fn：任务函数（function方法）；</li>\n<li>gulp.watch(glob [, opts], tasks)：监视文件的变化并运行相应的任务<br>  glob：路径模式匹配；<br>  opts：可以选配置对象；<br>  taks：执行的任务；<br><strong>注</strong>：1.1 streams（流）的简述：Node.js中的I/O操作是异步的，因此磁盘的读写和网络操作都需要传递回调函数。streams的优点：不需要把文件都一次性写入内存，通过pie（管道）把文件转为数据流（将任务和操作连接起来），像瀑布一样一级级（one by one）往下流（处理），因此只需一次I/O操作。而Grunt是每执行一个任务就需要I/O一次，在任务多的时候，就会有大量I/O操作，效率自然就会比较低。<br>1.2. 以前Gulp有5个核心API，但随着Gulp 3.5的更新，gulp.run()方法早已被弃用。<h3 id=\"四：gulp安装配置？\"><a href=\"#四：gulp安装配置？\" class=\"headerlink\" title=\"四：gulp安装配置？\"></a>四：gulp安装配置？</h3>&emsp;&emsp;gulp的安装很简单，在这我就不一一讲解，只看代码：<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//全局安装</span></div><div class=\"line\">npm install -g gulp</div><div class=\"line\"><span class=\"comment\">//本地安装，项目开发一般就是本地安装</span></div><div class=\"line\">npm install gulp --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>注：</strong><br>1.–save：将保存配置信息至package.json（此文件在 node_modules\\gulp 目录下）<br>2.-dev：将它作为你的项目依赖添加到中devDependencies内（–save和-dev是2个东西，记得分清前面的”-“号）<br>3.由于Gulp会自带package.json文件（用于存储项目的元数据），所以这里只做简单介绍（如果你想自己创建，也可通过命令 npm init，然后根据引导填写相关信息）：<br>我们在某个文件夹下面初始化一个目录：<br><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">npm</span> init</div></pre></td></tr></table></figure></p>\n<p>然后会创建一个项目，然后该文件夹羡慕就出现一个package.json文件，记录了该项目的所有信息：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//目前是初始化，信息比较少</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"02gulp\"</span>,<span class=\"comment\">//模块名称：只能包含小写字母数字和中划线，如果为空则使用项目文件夹名称代替（必填）</span></div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,<span class=\"comment\">//版本号（必填）</span></div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>, <span class=\"comment\">//描述：会在npm搜索列表中显示</span></div><div class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"</span><span class=\"keyword\">Error</span>: <span class=\"keyword\">no</span> <span class=\"keyword\">test</span> specified\\<span class=\"string\">\" &amp;&amp; exit 1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后我们在该目录下安装gulp，安装完gulp后我们安装插件：<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install gulp --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\"><span class=\"comment\">//例如我们通过gulp-livereload 和 gulp-webserver插件，来实现页面自动刷新，如需要安装其他插件，需要按照此方法安装</span></div><div class=\"line\">npm instal gulp-livereload  --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\">npm instal gulp-webserver  --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"五：Gulp任务配置（Task-Configuration）？\"><a href=\"#五：Gulp任务配置（Task-Configuration）？\" class=\"headerlink\" title=\"五：Gulp任务配置（Task Configuration）？\"></a>五：Gulp任务配置（Task Configuration）？</h3><p>5.1.在项目根目录中，创建gulpfile.js文件，用来配置和定义任务（task）。我们在根目录下创建一个src文件夹，src文件夹下面有js和sass等文件夹，下面的例子都是这样的目录，我们处理代码后生成的目录bulid可以先不用创建，因为会自动生成。<br>5.2.在gulpgile.js文件中填写<strong>实时刷新</strong>的相关配置：<br><strong>方法一：</strong>用gulp-webserver模块，该模块启动服务器的时候直接打开页面；<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);   <span class=\"comment\">//基础库</span></div><div class=\"line\"><span class=\"comment\">//引入gulp插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-livereload'</span>); <span class=\"comment\">//网页自动刷新 （服务器控制客户端同步刷新）</span></div><div class=\"line\">\twebserver = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-webserver'</span>);   <span class=\"comment\">// 本地服务器</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注册服务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'webserver'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'./'</span>)  \t\t\t<span class=\"comment\">//服务器目录(./代表根目录)</span></div><div class=\"line\">\t.pipe(webserver(&#123;  \t\t\t<span class=\"comment\">//运行gulp-webserver</span></div><div class=\"line\">\t\tlivereload:<span class=\"literal\">true</span>,    \t<span class=\"comment\">//启用livereload</span></div><div class=\"line\">\t\topen : <span class=\"literal\">true</span>\t\t\t\t<span class=\"comment\">//服务器启动时自动打开网页</span></div><div class=\"line\">\t&#125;))</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//定义html任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'html'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'src/*.html'</span>)</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 监听任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'*.html'</span>,[<span class=\"string\">'html'</span>])    <span class=\"comment\">//监听根目录下所有.html文件</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//默认任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'webserver'</span>,<span class=\"string\">'watch'</span>,<span class=\"string\">'html'</span>]);</div></pre></td></tr></table></figure></p>\n<p>当然，在执行过程中我们需要在根目录下创建一个html文件，然后执行<code>gulp</code>，然后相当于执行了<code>gulpfile.js</code>中的默认任务，如果我们需要实时刷新，我们就需要执行特定任务：<code>gulp webserver</code>,然后我们修改html文件，在浏览器中就可以实时看到效果了。<br><strong>方法二：</strong>第二种自动刷新的方法是安装gulp-connect模块，同样是上面的目录：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</div><div class=\"line\">\tuglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</div><div class=\"line\">\tconcat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>),</div><div class=\"line\">\trename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>),</div><div class=\"line\">\tconnect = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-connect'</span>);</div><div class=\"line\"><span class=\"comment\">//定义名为js的任务，该方法可以压缩、重命名和合并js代码，下文会讲明白的</span></div><div class=\"line\">gulp.task(<span class=\"string\">'js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'./src/js/*.js'</span>)</div><div class=\"line\">\t\t.pipe(concat(<span class=\"string\">'main.js'</span>))</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid/js'</span>))</div><div class=\"line\">\t\t.pipe(rename(&#123;<span class=\"attr\">suffix</span>:<span class=\"string\">'.min'</span>&#125;))</div><div class=\"line\">\t\t.pipe(uglify())</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid/js'</span>))</div><div class=\"line\">\t\t.pipe(connect.reload())</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//定义html任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'html'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'./src/*.html'</span>)</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'./bulid'</span>))</div><div class=\"line\">\t\t.pipe(connect.reload());</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//定义livereload任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'connect'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tconnect.server(&#123;</div><div class=\"line\">\t\t<span class=\"attr\">livereload</span> : <span class=\"literal\">true</span></div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//定义监听任务watch</span></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'src/*.html'</span>,[<span class=\"string\">'html'</span>]);</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'src/js/*.js'</span>,[<span class=\"string\">'js'</span>]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义默认任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'js'</span>,<span class=\"string\">'html'</span>,<span class=\"string\">'watch'</span>,<span class=\"string\">'connect'</span>]);</div></pre></td></tr></table></figure></p>\n<p>5.3.<strong>实时刷新并且压缩js代码</strong>的相关配置<br>&emsp;&emsp;下面的方法是用gulp-webserver模块，服务器启动时自动打开网页<br>当然我们需要提前配置好<code>gulp-concat</code>和<code>gulp-rename</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);   <span class=\"comment\">//基础库</span></div><div class=\"line\"><span class=\"comment\">//引入gulp插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-livereload'</span>), <span class=\"comment\">//网页自动刷新 （服务器控制客户端同步刷新）</span></div><div class=\"line\">\twebserver = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-webserver'</span>),   <span class=\"comment\">// 本地服务器</span></div><div class=\"line\">\tuglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</div><div class=\"line\"><span class=\"comment\">//注册实时刷新服务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'webserver'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'src'</span>)  \t\t\t<span class=\"comment\">//服务器目录(./代表根目录)</span></div><div class=\"line\">\t.pipe(webserver(&#123;  \t\t\t<span class=\"comment\">//运行gulp-webserver</span></div><div class=\"line\">\t\tlivereload:<span class=\"literal\">true</span>,    \t<span class=\"comment\">//启用livereload</span></div><div class=\"line\">\t\topen : <span class=\"literal\">true</span>\t\t\t\t<span class=\"comment\">//服务器启动时自动打开网页</span></div><div class=\"line\">\t&#125;)) </div><div class=\"line\">&#125;) </div><div class=\"line\"><span class=\"comment\">//压缩JavaScript文件</span></div><div class=\"line\">gulp.task(<span class=\"string\">'minify'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'./src/js/*.js'</span>)</div><div class=\"line\">\t\t.pipe(uglify())</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid/js'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//定义html任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'html'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'src/*.html'</span>)</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 监听任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'*.html'</span>,[<span class=\"string\">'html'</span>])    <span class=\"comment\">//监听src目录下所有.html文件</span></div><div class=\"line\">\tgulp.watch(<span class=\"string\">'src/js/*.js'</span>,[<span class=\"string\">'minify'</span>]);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//默认任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'html'</span>,<span class=\"string\">'minify'</span>,<span class=\"string\">'webserver'</span>,<span class=\"string\">'watch'</span>]);</div></pre></td></tr></table></figure></p>\n<p>5.3.<strong>实时刷新html、压缩、排错、合并js代码</strong>的相关配置<br>&emsp;&emsp;排错我们当然需要用到gulp-jshint这个著名的插件了，合并代码我们需要用到gulp-concat来合并好多的js到一个js下面，这样可以减少js的请求次数，有利于用户体验。自己安装吧！，配置如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>); <span class=\"comment\">//基础库</span></div><div class=\"line\"><span class=\"comment\">//引入gulp插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-livereload'</span>), <span class=\"comment\">//网页自动刷新 （服务器控制客户端同步刷新）</span></div><div class=\"line\">\twebserver = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-webserver'</span>), <span class=\"comment\">// 本地服务器</span></div><div class=\"line\">\tuglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</div><div class=\"line\">\tconcat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>),</div><div class=\"line\">\trename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>),</div><div class=\"line\">\tjshint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-jshint'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注册实时刷新服务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'webserver'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'bulid'</span>) <span class=\"comment\">//服务器目录(./代表根目录)</span></div><div class=\"line\">\t\t.pipe(webserver(&#123; <span class=\"comment\">//运行gulp-webserver</span></div><div class=\"line\">\t\t\tlivereload: <span class=\"literal\">true</span>, <span class=\"comment\">//启用livereload</span></div><div class=\"line\">\t\t\topen: <span class=\"literal\">true</span> <span class=\"comment\">//服务器启动时自动打开网页</span></div><div class=\"line\">\t\t&#125;))</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//定义js任务，排错、压缩、合并、</span></div><div class=\"line\">gulp.task(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.src([<span class=\"string\">'src/js/**/*.js'</span>, <span class=\"string\">'src/!js/**/*.min.js'</span>]) <span class=\"comment\">//匹配目录下所有的JavaScript文件，然后排除后缀为.min.js的文件</span></div><div class=\"line\">\t\t.pipe(jshint())</div><div class=\"line\">\t\t.pipe(jshint.reporter(<span class=\"string\">'default'</span>))</div><div class=\"line\"><span class=\"comment\">//\t\t.pipe(rename(&#123;suffix: '.min'&#125;))</span></div><div class=\"line\">\t\t.pipe(uglify())</div><div class=\"line\">\t\t.pipe(concat(<span class=\"string\">'main.js'</span>))</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid/js'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//定义html任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'src/*.html'</span>)</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 监听任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'src/*.html'</span>, [<span class=\"string\">'html'</span>]) <span class=\"comment\">//监听src目录下所有.html文件</span></div><div class=\"line\">\tgulp.watch(<span class=\"string\">'src/js/*.js'</span>, [<span class=\"string\">'js'</span>]);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//默认任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'html'</span>, <span class=\"string\">'js'</span>, <span class=\"string\">'webserver'</span>, <span class=\"string\">'watch'</span>]);</div></pre></td></tr></table></figure></p>\n<p>5.4.<strong>处理less</strong>的相关配置<br>&emsp;&emsp;加上上面的配置，我们引入处理less的代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>); <span class=\"comment\">//基础库</span></div><div class=\"line\"><span class=\"comment\">//引入gulp插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-livereload'</span>), <span class=\"comment\">//网页自动刷新 （服务器控制客户端同步刷新）</span></div><div class=\"line\">\twebserver = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-webserver'</span>), <span class=\"comment\">// 本地服务器</span></div><div class=\"line\">\tuglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</div><div class=\"line\">\tconcat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>),</div><div class=\"line\">\trename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>),</div><div class=\"line\">\tjshint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-jshint'</span>),</div><div class=\"line\"></div><div class=\"line\">\tless = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注册实时刷新服务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'webserver'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'bulid'</span>) <span class=\"comment\">//服务器目录(./代表根目录)</span></div><div class=\"line\">\t\t.pipe(webserver(&#123; <span class=\"comment\">//运行gulp-webserver</span></div><div class=\"line\">\t\t\tlivereload: <span class=\"literal\">true</span>, <span class=\"comment\">//启用livereload</span></div><div class=\"line\">\t\t\topen: <span class=\"literal\">true</span> <span class=\"comment\">//服务器启动时自动打开网页</span></div><div class=\"line\">\t\t&#125;))</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//定义js任务，排错、压缩、合并、</span></div><div class=\"line\">gulp.task(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.src([<span class=\"string\">'src/js/**/*.js'</span>, <span class=\"string\">'src/!js/**/*.min.js'</span>]) <span class=\"comment\">//匹配目录下所有的JavaScript文件，然后排除后缀为.min.js的文件</span></div><div class=\"line\">\t\t.pipe(jshint())</div><div class=\"line\">\t\t.pipe(jshint.reporter(<span class=\"string\">'default'</span>))</div><div class=\"line\"><span class=\"comment\">//\t\t.pipe(rename(&#123;suffix: '.min'&#125;))</span></div><div class=\"line\">\t\t.pipe(uglify())</div><div class=\"line\">\t\t.pipe(concat(<span class=\"string\">'main.js'</span>))</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid/js'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//定义html任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'src/*.html'</span>)</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//定义less任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'less'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'src/less/*.less'</span>)</div><div class=\"line\">\t\t.pipe(less())</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid/css'</span>))</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 监听任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;   </div><div class=\"line\">\twatcher = gulp.watch(<span class=\"string\">'src/*.html'</span>, [<span class=\"string\">'html'</span>]) <span class=\"comment\">//监听src目录下所有.html文件</span></div><div class=\"line\"><span class=\"comment\">//\tvar watcher = gulp.watch('src/*.html', ['html'])</span></div><div class=\"line\"><span class=\"comment\">//\twatcher.on('change',function(event)&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\tconsole.log('Event type' + event.type);</span></div><div class=\"line\"><span class=\"comment\">//\t\tconsole.log('Event path:' + event.path);</span></div><div class=\"line\"><span class=\"comment\">//\t&#125;)</span></div><div class=\"line\">\tgulp.watch(<span class=\"string\">'src/js/*.js'</span>, [<span class=\"string\">'js'</span>]);</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'src/less/*.less'</span>, [<span class=\"string\">'less'</span>]);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//默认任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'html'</span>, <span class=\"string\">'less'</span>,<span class=\"string\">'js'</span>, <span class=\"string\">'webserver'</span>, <span class=\"string\">'watch'</span>]);</div></pre></td></tr></table></figure></p>\n<h3 id=\"六：Gulp中不刷新加载页面模块-BroserSync的使用？\"><a href=\"#六：Gulp中不刷新加载页面模块-BroserSync的使用？\" class=\"headerlink\" title=\"六：Gulp中不刷新加载页面模块-BroserSync的使用？\"></a>六：Gulp中不刷新加载页面模块-BroserSync的使用？</h3><p>&emsp;&emsp;BroserSync也是gulp的一个子组件，为什么我要单独讲解呢，因为BroserSync在浏览器中展示变化的功能与LiveReload非常相似，但是它有更多的功能。当你改变代码的时候，BrowserSync会重新加载页面，或者如果是css文件，会直接添加进css中，页面并不需要再次刷新。这项功能在网站是禁止刷新的时候是很有用的。假设你正在开发单页应用的第4页，刷新页面就会导致你回到开始页。使用LiveReload的话，你就需要在每次改变代码之后还需要点击四次，而当你修改CSS时，插入一些变化时，BrowserSync会直接将需要修改的地方添加进CSS，就不用再点击回退。<br>    &emsp;&emsp;BrowserSync不需要使用浏览器插件，因为它本身就可以为你提供文件服务（如果文件是动态的，则为他们提供代理服务）和用来开启浏览器和服务器之间的socket的脚本服务。到目前为止这个功能的使用都十分顺畅。安装方法：<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> browser-sync</div></pre></td></tr></table></figure></p>\n<p>使用方法：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义browser-sync任务</span></div><div class=\"line\">gulp.task(<span class=\"symbol\">'browser</span>-sync',function()&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> files = [</div><div class=\"line\">\t\t<span class=\"symbol\">'src</span><span class=\"comment\">/**/</span>*.html',</div><div class=\"line\">    \t<span class=\"symbol\">'src</span>/css<span class=\"comment\">/**/</span>*.css',</div><div class=\"line\">    \t<span class=\"symbol\">'src</span>/less<span class=\"comment\">/**/</span>*.less',</div><div class=\"line\">    \t<span class=\"symbol\">'src</span>/imgs<span class=\"comment\">/**/</span>*.png',</div><div class=\"line\">    \t<span class=\"symbol\">'src</span>/js<span class=\"comment\">/**/</span>*.js',</div><div class=\"line\">\t];</div><div class=\"line\">\tbrowserSync.init(files,&#123;</div><div class=\"line\">\t\tserver:&#123;</div><div class=\"line\">\t\t\tbaseDir : <span class=\"symbol\">'sr</span>c'</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>执行方法，执行后后会监听匹配文件的变化而且不用刷新(当然我们之前的那么多配置并不是没用，因为开发需要刷新啊)，同时为src目录提供文件服务。<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp browser-<span class=\"keyword\">sync</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"七：总结gulp的配置\"><a href=\"#七：总结gulp的配置\" class=\"headerlink\" title=\"七：总结gulp的配置\"></a>七：总结gulp的配置</h3><p>&emsp;&emsp;说了这么多，我们应该清楚，gulp无非和其他node模块一样，先用<code>require()</code>引入模块，然后用<code>gulp.task()</code>建立任务，然后添加到监听任务<code>gulp.task(&#39;watch&#39;,function(){}</code>中，最后把这些任务名添加到默认任务<code>gulp.task(&#39;default&#39;, [&#39;html&#39;, &#39;less&#39;,&#39;js&#39;, &#39;webserver&#39;, &#39;watch&#39;]);</code>中为了执行方便，直接一个<code>gulp</code>就处理了所有代码，不过特别的模块需要特别执行，比如：<code>browserSync</code>模块</p>\n<p>github上练习代码：<a href=\"https://github.com/flyingpig2016/gulp-study.git\" target=\"_blank\" rel=\"external\">gulp-study</a></p>\n","comments":true,"categories":[],"tags":[{"name":"前端自动化工具","slug":"前端自动化工具","permalink":"//flyingpig2016.github.io/tags/前端自动化工具/"}]},{"title":"mongodb常用命令学习","date":"2017-07-02T08:23:25.000Z","path":"2017/07/02/mongodb常用命令学习/","content":"<h2 id=\"mongoDB常用命令\"><a href=\"#mongoDB常用命令\" class=\"headerlink\" title=\"mongoDB常用命令\"></a>mongoDB常用命令</h2><h3 id=\"1-展示数据库：show-dbs；\"><a href=\"#1-展示数据库：show-dbs；\" class=\"headerlink\" title=\"1. 展示数据库：show dbs；\"></a><strong>1. 展示数据库：</strong><code>show dbs</code>；</h3><h3 id=\"2-显示当前数据库对象或集合：db\"><a href=\"#2-显示当前数据库对象或集合：db\" class=\"headerlink\" title=\"2. 显示当前数据库对象或集合：db;\"></a><strong>2. 显示当前数据库对象或集合：</strong><code>db</code>;</h3><h3 id=\"3-连接到一个指定的数据库-use\"><a href=\"#3-连接到一个指定的数据库-use\" class=\"headerlink\" title=\"3. 连接到一个指定的数据库:  use;\"></a><strong>3. 连接到一个指定的数据库:</strong>  <code>use</code>;</h3><h3 id=\"4-关系型数据库和mongodb的术语：\"><a href=\"#4-关系型数据库和mongodb的术语：\" class=\"headerlink\" title=\"4. 关系型数据库和mongodb的术语：\"></a><strong>4. 关系型数据库和mongodb的术语：</strong></h3><p><img src=\"http://img.blog.csdn.net/20170610182030359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"5-集合就是-MongoDB-文档组，类似于-RDBMS中的表格，例如：\"><a href=\"#5-集合就是-MongoDB-文档组，类似于-RDBMS中的表格，例如：\" class=\"headerlink\" title=\"5. 集合就是 MongoDB 文档组，类似于 RDBMS中的表格，例如：\"></a><strong>5. 集合就是 MongoDB 文档组，</strong>类似于 RDBMS中的表格，例如：</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">\"site\"</span>:<span class=\"string\">\"www.baidu.com\"</span>&#125;</div><div class=\"line\">&#123;<span class=\"attr\">\"site\"</span>:<span class=\"string\">\"www.google.com\"</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"Google\"</span>&#125;</div><div class=\"line\">&#123;<span class=\"attr\">\"site\"</span>:<span class=\"string\">\"www.runoob.com\"</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"菜鸟教程\"</span>,<span class=\"attr\">\"num\"</span>:<span class=\"number\">5</span>&#125;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p>\n<h3 id=\"6-创建myblog数据库：\"><a href=\"#6-创建myblog数据库：\" class=\"headerlink\" title=\"**6.创建myblog数据库：\"></a>**6.创建myblog数据库：</h3><p>**<code>use myblog</code>,此时还不能用<code>show dbs</code>来查看，因为没有数据。当我们插入数据的时候才能看到数据列表：<code>db.myblog.insert({name:&#39;bangbang&#39;})</code> ;</p>\n<h3 id=\"7-删除base02数据库：\"><a href=\"#7-删除base02数据库：\" class=\"headerlink\" title=\"7.删除base02数据库：\"></a><strong>7.删除base02数据库：</strong></h3><pre><code>首先，我们先创建一个base02数据库,并插入一条数据，**注意：要想显示数据库，需要至少插入一个文档进去。**\n</code></pre><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">use</span> <span class=\"selector-tag\">base02</span>;</div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.base02</span><span class=\"selector-class\">.insert</span>(&#123;<span class=\"attribute\">name</span>:<span class=\"string\">'qiqi'</span>&#125;); <span class=\"comment\">//插入一条数据</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.dropDatabase</span>();\t\t<span class=\"comment\">//删除数据库</span></div></pre></td></tr></table></figure>\n<h3 id=\"8-创建和删除集合：\"><a href=\"#8-创建和删除集合：\" class=\"headerlink\" title=\"8.创建和删除集合：\"></a><strong>8.创建和删除集合：</strong></h3><p>创建集合：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">use base02;</div><div class=\"line\">db.createCollection(<span class=\"string\">'mycollection'</span>); </div><div class=\"line\">show collections <span class=\"comment\">//使用show collections来检查创建的集合</span></div><div class=\"line\">db.createCollection(<span class=\"string\">\"mycol\"</span>, &#123; <span class=\"string\">capped :</span> <span class=\"literal\">true</span>, <span class=\"string\">autoIndexID :</span> <span class=\"literal\">true</span>, <span class=\"string\">size :</span> <span class=\"number\">6142800</span>, <span class=\"string\">max :</span> <span class=\"number\">10000</span> &#125; )<span class=\"comment\">//根据集合的规格创建</span></div></pre></td></tr></table></figure></p>\n<p>其实在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建集合mycol1</span></div><div class=\"line\">db<span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.insert</span>(&#123;name:<span class=\"string\">'bangbang'</span>&#125;)</div><div class=\"line\"><span class=\"comment\">//删除集合mycol1</span></div><div class=\"line\">db<span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.drop</span>()</div></pre></td></tr></table></figure></p>\n<h3 id=\"9-插入文档\"><a href=\"#9-插入文档\" class=\"headerlink\" title=\"9.插入文档\"></a><strong>9.插入文档</strong></h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.insert</span>(&#123;<span class=\"attribute\">name</span>:<span class=\"string\">'bangbang'</span>&#125;)</div></pre></td></tr></table></figure>\n<p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var datas = [</div><div class=\"line\">\t&#123;title: <span class=\"symbol\">'MongoDB</span> Overview',     description: <span class=\"symbol\">'MongoDB</span> <span class=\"keyword\">is</span> no sql database',    by_user: <span class=\"symbol\">'runoob.com</span>',    url: <span class=\"symbol\">'http</span>:</div><div class=\"line\">//www.runoob.com',    tags: [<span class=\"symbol\">'mongodb</span>', <span class=\"symbol\">'database</span>', <span class=\"symbol\">'NoSQL</span>'],    likes: <span class=\"number\">100</span> &#125;, </div><div class=\"line\">\t&#123;title: <span class=\"symbol\">'NoSQL</span> Overview',     description: <span class=\"symbol\">'No</span> sql</div><div class=\"line\">database <span class=\"keyword\">is</span> very fast',    by_user: <span class=\"symbol\">'runoob.com</span>',    url: <span class=\"symbol\">'http</span>://www.runoob.com',    tags: [<span class=\"symbol\">'mongodb</span>', <span class=\"symbol\">'database</span>', <span class=\"symbol\">'NoSQL</span>'],    likes</div><div class=\"line\">: 10 &#125;, </div><div class=\"line\">\t&#123;title: <span class=\"symbol\">'Neo4j</span> Overview',     description: <span class=\"symbol\">'Neo4j</span> <span class=\"keyword\">is</span> no sql database',    by_user: <span class=\"symbol\">'Neo4j</span>',    url: <span class=\"symbol\">'http</span>://www.neo4j.com'</div><div class=\"line\">,    tags: [<span class=\"symbol\">'neo4j</span>', <span class=\"symbol\">'database</span>', <span class=\"symbol\">'NoSQL</span>'],    likes: <span class=\"number\">750</span> &#125;];</div><div class=\"line\">db.mycol1.insert(datas);</div></pre></td></tr></table></figure></p>\n<h3 id=\"10-查询文档\"><a href=\"#10-查询文档\" class=\"headerlink\" title=\"10.查询文档\"></a><strong>10.查询文档</strong></h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//格式化显示</span></div><div class=\"line\">db.mycol1.<span class=\"built_in\">find</span>().pretty();</div><div class=\"line\"><span class=\"comment\">//非格式化显示</span></div><div class=\"line\">db.mycol1.<span class=\"built_in\">find</span>();</div><div class=\"line\"><span class=\"comment\">//按照条件查找</span></div><div class=\"line\">db.mycol1.<span class=\"built_in\">find</span>(&#123;<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Neo4j Overview\"</span>&#125;)</div><div class=\"line\"><span class=\"comment\">//并列查找相当于and</span></div><div class=\"line\">db.mycol1.<span class=\"built_in\">find</span>(&#123;<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Neo4j Overview\"</span>,<span class=\"string\">\"likes\"</span>:<span class=\"number\">750</span>&#125;)</div><div class=\"line\"><span class=\"comment\">//或查找，相当于or</span></div><div class=\"line\">db.mycol1.<span class=\"built_in\">find</span>(&#123;</div><div class=\"line\">\t\t$<span class=\"keyword\">or</span>:[&#123;likes:<span class=\"number\">10</span>&#125;,&#123;likes:<span class=\"number\">750</span>&#125;]</div><div class=\"line\">\t&#125;)</div><div class=\"line\"><span class=\"comment\">//联合查询</span></div><div class=\"line\">db.mycol1.<span class=\"built_in\">find</span>(&#123;likes:<span class=\"number\">10</span>,$<span class=\"keyword\">or</span>:[&#123;likes:<span class=\"number\">10</span>&#125;,&#123;likes:<span class=\"number\">750</span>&#125;]&#125;)</div></pre></td></tr></table></figure>\n<p><strong>11.更新文档</strong><br>&emsp;&emsp;update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//用update更新选中的文档</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.update</span>(&#123;<span class=\"attribute\">title</span>:<span class=\"string\">'MongoDB Overview'</span>&#125;,&#123;$<span class=\"attribute\">set</span>:&#123;<span class=\"attribute\">title</span>:<span class=\"string\">'bangbang'</span>,<span class=\"attribute\">job</span>:<span class=\"string\">'program'</span>&#125;&#125;)</div><div class=\"line\"><span class=\"comment\">//用save更新，也就是全部替换了_id为593df22dfafc15a3d4d9bfc4的文档</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.save</span>(&#123;<span class=\"attribute\">_id</span>:ObjectId(<span class=\"string\">\"593df22dfafc15a3d4d9bfc4\"</span>),<span class=\"attribute\">title</span>:<span class=\"string\">'qiqi'</span>,<span class=\"attribute\">description</span>:<span class=\"string\">'I am qiqi'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"12-删除文档\"><a href=\"#12-删除文档\" class=\"headerlink\" title=\"12.删除文档\"></a><strong>12.删除文档</strong></h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//删除所有标题为MongoDB Overview的文件</span></div><div class=\"line\">db<span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.remove</span>(&#123;</div><div class=\"line\"><span class=\"string\">'title'</span>:<span class=\"string\">'MongoDB Overview'</span>&#125;)</div><div class=\"line\"><span class=\"comment\">//只删除一个</span></div><div class=\"line\">db<span class=\"selector-class\">.mycoll1</span><span class=\"selector-class\">.remove</span>(&#123;<span class=\"string\">'title'</span>:<span class=\"string\">'MongoDB Overview'</span>&#125;,<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"comment\">//如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</span></div><div class=\"line\">db<span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.remove</span>()</div></pre></td></tr></table></figure>\n<h3 id=\"13-MongoDB投影\"><a href=\"#13-MongoDB投影\" class=\"headerlink\" title=\"13.MongoDB投影\"></a><strong>13.MongoDB投影</strong></h3><p>&emsp;&emsp;mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段.<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这里只显示title和description字段，不显示_id字段</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.find</span>(&#123;&#125;,&#123;<span class=\"attribute\">title</span>:<span class=\"number\">1</span>,<span class=\"attribute\">description</span>:<span class=\"number\">1</span>,<span class=\"attribute\">_id</span>:<span class=\"number\">0</span>&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"14-限制文档\"><a href=\"#14-限制文档\" class=\"headerlink\" title=\"14.限制文档\"></a><strong>14.限制文档</strong></h3><p>&emsp;&ems;要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//只显示两条数据</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.limit</span>(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">//只显示一条数据</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.find</span>(&#123;&#125;,&#123;<span class=\"attribute\">title</span>:<span class=\"number\">1</span>,<span class=\"attribute\">description</span>:<span class=\"number\">1</span>,<span class=\"attribute\">_id</span>:<span class=\"number\">0</span>&#125;)<span class=\"selector-class\">.limit</span>(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n<p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//跳过第一条显示全部</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.skip</span>(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">//跳过第一条显示两条数据</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.limit</span>(<span class=\"number\">2</span>)<span class=\"selector-class\">.skip</span>(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"15-文档排序\"><a href=\"#15-文档排序\" class=\"headerlink\" title=\"15.文档排序\"></a><strong>15.文档排序</strong></h3><p>&emsp;&emsp;要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.sort</span>(&#123;<span class=\"attribute\">likes</span>:<span class=\"number\">1</span>&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"16-MongoDB索引\"><a href=\"#16-MongoDB索引\" class=\"headerlink\" title=\"16.MongoDB索引\"></a><strong>16.MongoDB索引</strong></h3><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。要创建索引，需要使用MongoDB的ensureIndex()方法。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol2</span><span class=\"selector-class\">.ensureIndex</span>(&#123;<span class=\"attribute\">title</span>:<span class=\"number\">1</span>&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"17-MongoDB-聚合\"><a href=\"#17-MongoDB-聚合\" class=\"headerlink\" title=\"17.MongoDB 聚合\"></a><strong>17.MongoDB 聚合</strong></h3><p>&emsp;&emsp;聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。</p>\n<h3 id=\"18-复制\"><a href=\"#18-复制\" class=\"headerlink\" title=\"18.复制\"></a><strong>18.复制</strong></h3><p>&emsp;&emsp;复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。<br><a href=\"http://www.cnblogs.com/huangxincheng/archive/2012/03/04/2379755.html\" target=\"_blank\" rel=\"external\">主从复制</a></p>\n","comments":true,"categories":[],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"//flyingpig2016.github.io/tags/MongoDB/"}]},{"title":"resume","date":"2017-07-02T08:23:22.000Z","path":"2017/07/02/resume/","content":"","comments":true,"categories":[{"name":"resume","slug":"resume","permalink":"//flyingpig2016.github.io/categories/resume/"}],"tags":[]},{"title":"01note","date":"2017-06-22T15:18:54.000Z","path":"2017/06/22/01note/","content":"<p>这是我的note页面 </p>\n","comments":true,"categories":[],"tags":[{"name":"notes","slug":"notes","permalink":"//flyingpig2016.github.io/tags/notes/"}]}]