[{"title":"directive-自定义指令的方法.md","date":"2017-07-18T03:14:38.000Z","path":"2017/07/18/directive-自定义指令的方法/","content":"<p><b>This is a angular-demos, It can show my progress of study.</b></p>\n<h2 id=\"02directive——Angularjs的创建指令方法\"><a href=\"#02directive——Angularjs的创建指令方法\" class=\"headerlink\" title=\"02directive——Angularjs的创建指令方法\"></a>02directive——Angularjs的创建指令方法</h2><h3 id=\"restrict-值分类\"><a href=\"#restrict-值分类\" class=\"headerlink\" title=\"restrict 值分类:\"></a>restrict 值分类:</h3><ul>\n<li>E 作为元素名使用,例如：<code>&lt;hello&gt;&lt;/hello&gt;</code>  </li>\n<li>A 作为属性使用(默认),例如：<code>&lt;div hello&gt;&lt;/div&gt;</code></li>\n<li>C 作为类名使用 , 例如：<code>&lt;div class=&quot;hello&quot;&gt;&lt;/div&gt;</code></li>\n<li>M 作为注释使用,  例如：<code>&lt;!--directive:hello--&gt;</code><h3 id=\"directive的templateUrl属性\"><a href=\"#directive的templateUrl属性\" class=\"headerlink\" title=\"directive的templateUrl属性\"></a>directive的templateUrl属性</h3>通常我们这样写，template，但是如果模板里面东西很多，我们就需要独立出来一个html文件，<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">myApp.directive(<span class=\"string\">'hello'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>&#123;</div><div class=\"line\">        restrict : <span class=\"string\">'AEMC'</span>, <span class=\"comment\">//- A 作为属性使用(默认),例如：`&lt;div hello&gt;&lt;/div&gt;`</span></div><div class=\"line\">        template : <span class=\"string\">'&lt;div&gt;Hello everyone, I am bangbang!&lt;/div&gt;'</span>,</div><div class=\"line\">        replace : <span class=\"keyword\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>用templateUrl属性独立出html文件,<strong>注意：</strong>如果用longDirective命名，引用的时候用<code>&lt;long-directive&gt;&lt;/long-directive&gt;</code>,要不然就用纯小写字母</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">myApp.directive(<span class=\"string\">'longDirective'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        restrict : <span class=\"string\">'AEMC'</span>,  <span class=\"comment\">//- E 作为元素名使用,例如：`&lt;hello&gt;&lt;/hello&gt;`  </span></div><div class=\"line\">        templateUrl : <span class=\"string\">'tpls/long.html'</span>,</div><div class=\"line\">        replace : <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"templateCache-缓存模板方法\"><a href=\"#templateCache-缓存模板方法\" class=\"headerlink\" title=\"$templateCache(缓存模板方法)\"></a>$templateCache(缓存模板方法)</h3><p>&emsp;&emsp;通过angular创建的模块,都有一个run方法,注射器在加载完成所有模块的时候，该方法使用一次。接受一个函数作为参数.该函数会被执行.$templateCache是angular内置的一个服务,它的put方法用于存放模板.它接受两个参数,第一个参数为模板的名字,第一个参数为模板的名字,也就是templateUrl的值,cache.html,第二个参数就是html字符串,也就是模板的内容.<br>&emsp;&emsp;这种方法常用于模板内容是通过$http异步获取的.然后将模板放入$templateCache中以便后面使用.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">myApp.run(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($templateCache)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// $templateCache.put('tpls/cache.html','&lt;div&gt;hello everyone!!!!&lt;/div&gt;')</span></div><div class=\"line\">    $templateCache.put(<span class=\"string\">'cache.html'</span>,<span class=\"string\">'&lt;p&gt;我是缓存的模板&lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\">myApp.directive(<span class=\"string\">'cacheDirective'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($templateCache)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>&#123;</div><div class=\"line\">        restrict : <span class=\"string\">'AECM'</span>,</div><div class=\"line\">        template : $templateCache.get(<span class=\"string\">'cache.html'</span>),</div><div class=\"line\">        replace : <span class=\"keyword\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"transclude属性的使用-让创建的标签里面的内容不被替换\"><a href=\"#transclude属性的使用-让创建的标签里面的内容不被替换\" class=\"headerlink\" title=\"transclude属性的使用(让创建的标签里面的内容不被替换)\"></a>transclude属性的使用(让创建的标签里面的内容不被替换)</h3><p>下面代码让html页面中的<code>&lt;no-Replace&gt;希望我不被替换掉&lt;/no-Replace&gt;</code>里面的内容不会被替换<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">myApp.directive(<span class=\"string\">\"noReplace\"</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        restrict : <span class=\"string\">'AECM'</span>,</div><div class=\"line\">        template : <span class=\"string\">\"&lt;div&gt;Hello everyone,I am noReplace!&lt;/div&gt;&lt;div ng-transclude&gt;&lt;/div&gt;\"</span>,</div><div class=\"line\">        transclude : <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"compile与link\"><a href=\"#compile与link\" class=\"headerlink\" title=\"compile与link\"></a>compile与link</h3><p>&emsp;&emsp;Angularjs的运行流程如下所示：<br><img src=\"./img/1.jpg\" alt=\"compile与link\"></p>\n<ul>\n<li>compile函数用来对模板自身进行转换，link函数负责在模型和视图之间进行动态关联；</li>\n<li>作用域在链接阶段才会被绑定到编译之后的link函数上；</li>\n<li>compile函数仅仅在便一阶段运行一次，而对于指令的每个实例，link函数都会执行一次；</li>\n<li>compile可以返回preLink和postLink函数，而link函数只会返回postLink函数；</li>\n<li>如果需要修改DOM结构，应该在postLink中来做这件事，而如果preLink中做这件事情会导致失误，大所属时候我们只需要编写link函数即可；</li>\n</ul>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">myApp.directive(<span class=\"string\">'cpl'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        restrict : <span class=\"string\">'AECM'</span>,</div><div class=\"line\">        template : <span class=\"string\">'&lt;div&gt;Hello bangbang&lt;/div&gt;'</span>,</div><div class=\"line\">        replace : <span class=\"literal\">true</span>,</div><div class=\"line\">        compile : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">//用来对模板自身进行转换</span></div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\">        link : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">//用来操作DOM和绑定事件监听器</span></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>githu源码：<a href=\"https://github.com/flyingpig2016/angular-demos/tree/master/02directive\" target=\"_blank\" rel=\"external\">02directive</a> —— 自定义指令的方法</p>\n","comments":true,"categories":[],"tags":[{"name":"Angularjs","slug":"Angularjs","permalink":"//www.iambangbang.club/tags/Angularjs/"}]},{"title":"AngularJs中ui-router使用方法","date":"2017-07-14T10:39:30.000Z","path":"2017/07/14/AngularJs中ui-router使用方法/","content":"<h3 id=\"一：为什么使用ui-router？\"><a href=\"#一：为什么使用ui-router？\" class=\"headerlink\" title=\"一：为什么使用ui-router？\"></a>一：为什么使用ui-router？</h3><p>&emsp;&emsp;如果使用原生router的话，也就是当我们在index.html页面引用<code>angular-route.js</code>的时候，例如：我们在index.html页面的<code>body</code>下加入<code>&lt;div class=&quot;page &quot; ng-view&gt;&lt;/div&gt;</code>，然后我们在<code>app.js</code>中写入（具体代码看文章末尾的下载链接）：<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var bookStoreApp = angular.module(<span class=\"string\">'bookStoreApp'</span>, [</div><div class=\"line\">    <span class=\"string\">'ngRoute'</span>, <span class=\"string\">'ngAnimate'</span>, <span class=\"string\">'bookStoreCtrls'</span>, <span class=\"string\">'bookStoreFilters'</span>,</div><div class=\"line\">    <span class=\"string\">'bookStoreServices'</span>, <span class=\"string\">'bookStoreDirectives'</span></div><div class=\"line\">]);</div><div class=\"line\"></div><div class=\"line\">bookStoreApp.config(<span class=\"keyword\">function</span>($routeProvider) &#123;</div><div class=\"line\">    $routeProvider.when(<span class=\"string\">'/hello'</span>, &#123;</div><div class=\"line\">        templateUrl: <span class=\"string\">'tpls/hello.html'</span>,</div><div class=\"line\">        controller: <span class=\"string\">'HelloCtrl'</span></div><div class=\"line\">    &#125;).when(<span class=\"string\">'/list'</span>, &#123;</div><div class=\"line\">        templateUrl: <span class=\"string\">'tpls/bookList.html'</span>,</div><div class=\"line\">        controller: <span class=\"string\">'BookListCtrl'</span></div><div class=\"line\">    &#125;).otherwise(&#123;</div><div class=\"line\">        redirectTo: <span class=\"string\">'/hello'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>此时，我们首页默认显示hello，当我们在页面中点击下一页链接的时候，我们跳转到以list为模板的页面。以上是简单的页面跳转，但是如果我们需要稍微复杂一点的页面，例如我们想要写个上面一个是菜单栏，菜单栏下面还有点击的页面，就像是选项卡一样，但是分别进入了不同的页面（实际上是angularjs路由机制中替换了某个模板），如下图所示：<br><img src=\"http://img.blog.csdn.net/20170714171942351?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>我们就需要用到嵌套的路由，因此，我们需要用到angularjs中ui.router模块。<br><a id=\"more\"></a></p>\n<h3 id=\"二：怎样使用ui-router？\"><a href=\"#二：怎样使用ui-router？\" class=\"headerlink\" title=\"二：怎样使用ui-router？\"></a>二：怎样使用ui-router？</h3><p>&emsp;&emsp;使用<code>ui-router</code>和<code>ngRouter</code>模块当然有很多不同的地方，例如在index.html中，我们在body中就使用<code>&lt;div ui-view=&quot;&quot;&gt;&lt;/div&gt;</code>。接下来看详细用法：<br>1.首先我们需要知道项目的目录结构：<br><img src=\"http://img.blog.csdn.net/20170714172416091?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"目录结构\"><br>其中node_modules和package.json不用多说，是git版本控制，不用也可以，app目录就是项目的入口，里面的index.html是主模板，js中的app.js是项目的入口文件，tpls目录里面存放html模板，它需要和index.html组合使用。当然，组合使用就需要路由文件的支持。<br>2.我们需要使用bower安装<code>angular-ui-router</code>模块，当然是在你的项目任意目录下面创建，使用的时候需要写好路径就好，尽量到framework里面安装，因为里面都是存放angularjs相关的js代码和文件<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bower </span><span class=\"keyword\">install </span>angular-ui-router</div></pre></td></tr></table></figure></p>\n<p>3.其次就是添加index.html文件<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"routerApp\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>BookStore<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"framework/bootstrap-3.0.0/css/bootstrap.css\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../bower_components/angular/angular.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../bower_components/angular-ui-router/release/angular-ui-router.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar navbar-inverse\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"navigation\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-header\"</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-brand\"</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"#\"</span>&gt;</span>AngularUI Router<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</span>     </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"home\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>接下来创建四个模板文件：about.html,home.html.home-list.html和table-data.html，代码如下：<br>home.html页面：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"jumbotron text-center\"</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This page demonstrates  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-danger\"</span>&gt;</span>nested<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>views.  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\".list\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>List<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\".paragraph\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-danger\"</span>&gt;</span>Paragraph<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>home下面有两个链接list和paragraph，这连个模板如下所示：<br>home-list.html页面：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>  </span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"topic in topics\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123; topic &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>  </span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>paragraph页面在app.js里面被直接写入：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.state</span>(<span class=\"string\">'home.paragraph'</span>, &#123;</div><div class=\"line\">\t<span class=\"attribute\">url</span>: <span class=\"string\">'/paragraph'</span>,</div><div class=\"line\">\t<span class=\"attribute\">template</span>: <span class=\"string\">'I could sure use a scoop of ice-cream.2 '</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>因此，可以不用创建，如果需要更复杂的页面，就需要创建，在这里只是作为演示。</p>\n<p>4.然后我们添加about.html页面<br>about.html页面<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"jumbotron text-center\"</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>The About Page<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This page demonstrates  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-danger\"</span>&gt;</span>multiple<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>and  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-danger\"</span>&gt;</span>named<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>views.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-6\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>=<span class=\"string\">\"columnOne\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-6\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>=<span class=\"string\">\"columnTwo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>about页面里面有两个ui-view,即：columnOne和columnTwo，所以需要另一个模板table-data.html显示，该模板如下：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Ice-Creams<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>  </span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table table-hover table-striped table-bordered\"</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Cost<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"topic in topics\"</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"template-variable\">&#123;&#123; topic.name &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span>  </span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$<span class=\"template-variable\">&#123;&#123; topic.price &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span>  </span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>5.配置页面的路由，即app.js文件<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">var routerApp = angular.module(<span class=\"string\">'routerApp'</span>, [<span class=\"string\">'ui.router'</span>]);  </div><div class=\"line\">routerApp.config([<span class=\"string\">'$stateProvider'</span>, <span class=\"string\">'$urlRouterProvider'</span>,<span class=\"keyword\">function</span>($stateProvider, $urlRouterProvider) &#123;</div><div class=\"line\">\t/*路由重定向 $urlRouterProvider:如果没有路由引擎能匹配当前的导航状态，那它就会默认将路径路由至 home.html,  </div><div class=\"line\">\t *这个页面就是状态名称被声明的地方. */</div><div class=\"line\">\t$urlRouterProvider.otherwise(<span class=\"string\">'/home'</span>);</div><div class=\"line\">\t$stateProvider</div><div class=\"line\">\t\t.state(<span class=\"string\">'home'</span>, &#123;</div><div class=\"line\">\t\t\turl: <span class=\"string\">'/home'</span>,</div><div class=\"line\">\t\t\ttemplateUrl: <span class=\"string\">'tpls/home.html'</span></div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t\t/*  nested list with custom controller*/</div><div class=\"line\">\t\t.state(<span class=\"string\">'home.list'</span>, &#123;</div><div class=\"line\">\t\t\turl: <span class=\"string\">'/list'</span>,</div><div class=\"line\">\t\t\ttemplateUrl: <span class=\"string\">'tpls/home-list.html'</span>,</div><div class=\"line\">\t\t\tcontroller: function($scope) &#123;</div><div class=\"line\">\t\t\t\t$scope.topics = [<span class=\"string\">'Butterscotch'</span>, <span class=\"string\">'Black Current'</span>, <span class=\"string\">'Mango'</span>];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t\t// nested list with just some random string data  </div><div class=\"line\">\t\t.state(<span class=\"string\">'home.paragraph'</span>, &#123;</div><div class=\"line\">\t\t\turl: <span class=\"string\">'/paragraph'</span>,</div><div class=\"line\">\t\t\ttemplate: <span class=\"string\">'I could sure use a scoop of ice-cream.2 '</span></div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t\t.state(<span class=\"string\">'about'</span>, &#123;</div><div class=\"line\">\t\t\turl: <span class=\"string\">'/about'</span>,</div><div class=\"line\">\t\t\t/* view 用在该状态下有多个 ui-view 的情况，可以对不同的 ui-view 使用特定的 template, controller, resolve data </div><div class=\"line\">\t\t\t 绝对 view 使用 <span class=\"string\">'@'</span> 符号来区别，比如 <span class=\"string\">'columnOne@about'</span> 表明名为 <span class=\"string\">'columnOne'</span> 的 ui-view 使用了 <span class=\"string\">'about'</span> 状态的 </div><div class=\"line\">\t\t\t 模板(template)，相对 view 则无*/</div><div class=\"line\">\t\t\tviews: &#123;</div><div class=\"line\">\t\t\t\t// 无名 view  </div><div class=\"line\">\t\t\t\t<span class=\"string\">''</span>: &#123;</div><div class=\"line\">\t\t\t\t\ttemplateUrl: <span class=\"string\">'tpls/about.html'</span></div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\t// for <span class=\"string\">\"ui-view='columnOne'\"</span>  </div><div class=\"line\">\t\t\t\t<span class=\"string\">'columnOne@about'</span>: &#123;</div><div class=\"line\">\t\t\t\t\ttemplate: <span class=\"string\">'这里是第一列的内容'</span></div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\t// for <span class=\"string\">\"ui-view='columnTwo'\"</span>  </div><div class=\"line\">\t\t\t\t<span class=\"string\">'columnTwo@about'</span>: &#123;</div><div class=\"line\">\t\t\t\t\ttemplateUrl: <span class=\"string\">'tpls/table-data.html'</span>,</div><div class=\"line\">\t\t\t\t\tcontroller: <span class=\"string\">'table-Controller'</span></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">&#125;]);</div><div class=\"line\">routerApp.controller(<span class=\"string\">'table-Controller'</span>, <span class=\"keyword\">function</span>($scope) &#123;</div><div class=\"line\">\t$scope.message = <span class=\"string\">'test'</span>;</div><div class=\"line\">\t$scope.topics = [&#123;</div><div class=\"line\">\t\tname: <span class=\"string\">'Butterscotch'</span>,</div><div class=\"line\">\t\tprice: <span class=\"number\">50</span></div><div class=\"line\">\t&#125;, &#123;</div><div class=\"line\">\t\tname: <span class=\"string\">'Black Current'</span>,</div><div class=\"line\">\t\tprice: <span class=\"number\">100</span></div><div class=\"line\">\t&#125;, &#123;</div><div class=\"line\">\t\tname: <span class=\"string\">'Mango'</span>,</div><div class=\"line\">\t\tprice: <span class=\"number\">20</span></div><div class=\"line\">\t&#125;];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>最后写一下需要学习更多的童鞋，github网址：<a href=\"https://github.com/angular-ui/ui-router\" target=\"_blank\" rel=\"external\">angular-ui/ui-router的github链接地址</a><br>我的代码备份：<a href=\"http://download.csdn.net/detail/flyingpig2016/9899101\" target=\"_blank\" rel=\"external\">angularjs中ui.router和ngRouter模块的用法</a></p>\n","comments":true,"categories":[],"tags":[{"name":"Angularjs","slug":"Angularjs","permalink":"//www.iambangbang.club/tags/Angularjs/"}]},{"title":"深入理解prototyp","date":"2017-07-10T05:40:38.000Z","path":"2017/07/10/深入理解prototyp/","content":"<h2 id=\"对JavaScript中原型模式的理解\"><a href=\"#对JavaScript中原型模式的理解\" class=\"headerlink\" title=\"对JavaScript中原型模式的理解\"></a>对JavaScript中原型模式的理解</h2><h3 id=\"一：什么是原型对象？有什么优点？\"><a href=\"#一：什么是原型对象？有什么优点？\" class=\"headerlink\" title=\"一：什么是原型对象？有什么优点？**\"></a>一：什么是原型对象？有什么优点？**</h3><p>&emsp;&emsp; 简单的来说，无论何时，我们创建的每一个函数都有一个prototype属性，这个属性是一个指针，指向一个对象，这个对象包含了通过调用该构造函数所创建的对象共享的属性和方法。其实我们平常的叫法就是指：<strong>prototype就是通过该构造函数创建的某个实例的原型对象</strong>，但是其实prototype是每个构造函数的属性而已，只能说万物皆对象罢了。<br>&emsp;&emsp; 原型对象的优点是：所有的对象实例都可以共享它包含的属性和方法。这一点可以在构造函数里就可以看出来，因为构造函数在函数里面就定义了对象的实例信息，而原型对象可以在任何地方定义属性和方法。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">Person.prototype.name = <span class=\"string\">'bangbang'</span>;</div><div class=\"line\">Person.prototype.age = <span class=\"number\">18</span>;</div><div class=\"line\">Person.prototype.job = <span class=\"string\">'programmer'</span>;</div><div class=\"line\">Person.prototype.dream = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Change yourself'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">person1.dream();\t<span class=\"comment\">//Change yourself</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">person2.dream();</div><div class=\"line\"><span class=\"comment\">//判断两个实例继承的方法和属性是否全等</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.dream === person2.dream);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.age === person2.age);</div></pre></td></tr></table></figure></p>\n<p>由以上的代码可以看出它比构造函数方法的好处就是，person1和person2访问的都是同一个dream()函数，即他们的属性和方法都是共享的。<br><a id=\"more\"></a></p>\n<h3 id=\"二：深入理解原型对象和prototype？\"><a href=\"#二：深入理解原型对象和prototype？\" class=\"headerlink\" title=\"二：深入理解原型对象和prototype？**\"></a>二：深入理解原型对象和prototype？**</h3><p>&emsp;&emsp;由上面可知，我们创建了一个函数，就会根据ECMAscript特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个constructor(构造函数)属性，这个属性是一个指向prototype属性所在函数的指针。就像前面的例子，Person.prototype.constructor指向Person，而通过这个构造函数，我们还可以继续为原型对象添加其他属性和方法。<br>&emsp;&emsp;下面，我们就开始从原理上说明上面代码运行机制的：</p>\n<ol>\n<li>创建一个自定义的构造函数后，它的原型对象默认只会有constructor属性，其他属性和方法都是从Object继承而来的；</li>\n<li>当调用构造函数创建一个新实例后，该实例的内部将包含一个指针，指向构造函数的原型对象。ECMA5中称这个指针叫[[prototype]]。虽然在脚本中没有标准的方式访问[[prototype]]，但Firefox、Safari和Chrome在每个对象上都支持一个属性<em>proto</em>;而在其他浏览器中，这个属性则是完全不可见的。不过要明确的真正一点就是，这个连接存在于 <strong>实例</strong> 和 <strong>构造函数的原型对象</strong> 之间，而不是存在于实例和构造函数之间，用前面使用Person构造函数和Person.prototype创建实例的代码为例，各个对象之间的关系如下图所示：<br><img src=\"http://img.blog.csdn.net/20170514170752175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>&emsp;&emsp;上图展示了Person构造函数、Person的原型以及Person现有的两个实例之间的关系，再次，Person.prototype指向了原型对象，而Person.prototype.constructor又指回了Person。原型对象中除了包含constructor属性之外，还包括后来添加的其他属性。Person的每个实例——person1和person2都包含一个内部属性，该属性指向了Person.prototype；换句话说，他们与构造函数没有直接关系。<br>&emsp;&emsp;注意：虽然这两个实例都不包含属性和方法，但我们却可以调用name、age、job、dream()方法和属性，这是通过查找对象属性的过程来实现的。<br>&emsp;&emsp;虽然我们不能访问到[[prototype]]，但可以通过isPrototypeOf()方法来确定对象之间是否存在这种关系。因为这两个实例都有一个指向Person.prototype的指针，因此，都返回true如下所示：<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">console</span>.log(<span class=\"type\">Person</span>.proto<span class=\"keyword\">type</span>.isPrototypeOf(person1));//true</div><div class=\"line\"><span class=\"title\">console</span>.log(<span class=\"type\">Person</span>.proto<span class=\"keyword\">type</span>.isPrototypeOf(person2));//true</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>ECMA5增加了一个方法，叫Object.getPrototypeOf(),这个方法返回[[Prototype]]的值,也就是括号里面对象的原型，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(person1) == Person.prototype; <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(person1).name); <span class=\"comment\">//'bangbang'</span></div></pre></td></tr></table></figure></p>\n<p>用hasOwnProperty()方法可以检测一个属性是存在于实例中还是原型中。还是上面的例子：</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.hasOwnProperty(<span class=\"string\">'name'</span>); <span class=\"comment\">//false</span></div><div class=\"line\">person1.<span class=\"built_in\">name</span> = <span class=\"string\">'qiqi'</span>;</div><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.hasOwnProperty(<span class=\"string\">'name'</span>); <span class=\"comment\">//true —— 来自实例</span></div><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.<span class=\"built_in\">name</span>);  <span class=\"comment\">//'qiqi' ——来自实例</span></div><div class=\"line\">delete person1.<span class=\"built_in\">name</span>;</div><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.<span class=\"built_in\">name</span>); <span class=\"comment\">//'bangbang' —— 来自原型</span></div><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.hasOwnProperty(<span class=\"string\">'name'</span>); <span class=\"comment\">//true ——来自原型</span></div></pre></td></tr></table></figure>\n<p>当我们为person1添加name属性的时候，如下图图所示：<br><img src=\"http://img.blog.csdn.net/20170514170806065?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"三：组合使用构造函数模式和原型模式优点最多：\"><a href=\"#三：组合使用构造函数模式和原型模式优点最多：\" class=\"headerlink\" title=\"三：组合使用构造函数模式和原型模式优点最多：**\"></a>三：组合使用构造函数模式和原型模式优点最多：**</h3><p>&emsp;&emsp;以上我讲述了用构造函数生成对象的原理以及生成的对象和原型对象之间的关系，原理了解了这么多，我么当然需要知道怎么在合适的时候用他们。创建自定义类型的最常见方式就是组合使用构造函数模式和原型模式。构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。每个实例都会有自己的一份实例属性的副本，但同时又共享着对方发的引用，最大限度的节省了内存。如下例所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age,job</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.job = job;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.love = [<span class=\"string\">'qiqi'</span>,<span class=\"string\">'lili'</span>];</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">\t<span class=\"attr\">constructor</span> : Person,</div><div class=\"line\">\t<span class=\"attr\">dream</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.love[<span class=\"number\">0</span>]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'bangbang'</span>,<span class=\"number\">18</span>,<span class=\"string\">'programmer'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'xiaoya'</span>,<span class=\"number\">18</span>,<span class=\"string\">'teacher'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.love);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(person2.love)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.love === person2.love);  <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"comment\">//给person1的love属性添加元素</span></div><div class=\"line\">person1.love.push(<span class=\"string\">'niuniu'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.love)  <span class=\"comment\">//[\"qiqi\", \"lili\", \"niuniu\"]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(person2.love)  <span class=\"comment\">//[\"qiqi\", \"lili\"]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.love === person2.love);  <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.dream === person2.dream);<span class=\"comment\">//true</span></div></pre></td></tr></table></figure></p>\n<p>以上这种模式是ECMAscript中使用最广泛的，认同度最高的，优点最多的创建自定义类型的方法，也就是创建JavaScript中类的方法。</p>\n","comments":true,"categories":[],"tags":[{"name":"javascript高级程序设计","slug":"javascript高级程序设计","permalink":"//www.iambangbang.club/tags/javascript高级程序设计/"}]},{"title":"01note","date":"2017-06-22T15:18:54.000Z","path":"2017/06/22/01note/","content":"<p>这是我的note页面 </p>\n","comments":true,"categories":[],"tags":[{"name":"notes","slug":"notes","permalink":"//www.iambangbang.club/tags/notes/"}]}]