[{"title":"理解ng中的依赖和注入","date":"2017-07-19T12:38:15.000Z","path":"2017/07/19/理解ng中的依赖和注入/","content":"<h2 id=\"Angularjs中的依赖注入\"><a href=\"#Angularjs中的依赖注入\" class=\"headerlink\" title=\"Angularjs中的依赖注入\"></a>Angularjs中的依赖注入</h2><h3 id=\"一：为什么要依赖注入？\"><a href=\"#一：为什么要依赖注入？\" class=\"headerlink\" title=\"一：为什么要依赖注入？\"></a>一：为什么要依赖注入？</h3><p>&emsp;&emsp;”依赖注入” ——，从字面意思上来说分为两个部分：一是依赖，二是注入。也就是说，当一个对象在建立时候，需要依赖于另一个对象，这是代码层的一种依赖关系；当在代码中声明了依赖关系之后，Angular通过injector注入器将所依赖的对象进行”注入”操作.</p>\n<h3 id=\"二：Angular的三种注入方式？\"><a href=\"#二：Angular的三种注入方式？\" class=\"headerlink\" title=\"二：Angular的三种注入方式？\"></a>二：Angular的三种注入方式？</h3><p>&emsp;&emsp;推断型注入、声明式注入(标注式注入)，内联注入,下面的例子中html只有一个<code>&lt;div&gt;gameName&lt;/div&gt;</code></p>\n<ul>\n<li>内联注入（最常用）<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">myModule.controller(<span class=\"string\">'myCtrl'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope1)</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope1)</span></span>&#123;</div><div class=\"line\">        $scope1.gameName = <span class=\"string\">'棒棒'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;])</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>推断型注入(也就是吧里面的函数拿出来)</li>\n</ul>\n<p>&emsp;&emsp;注意：里面的参数($scope)不能随意换，要和被注入的对象相同,因为通常被注入的是作用域$scope<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myCtrl = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope)</span></span>&#123;</div><div class=\"line\">    $scope.gameName = <span class=\"string\">'棒棒'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">myModule.controller(<span class=\"string\">'myCtrl'</span>,myCtrl);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>声明式注入（也就是可以换了参数的名称）<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myCtrl = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(myName)</span></span>&#123;</div><div class=\"line\">    myName.gameName = <span class=\"string\">'棒棒'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">myCtrl.$inject = [<span class=\"string\">'$scope'</span>]; <span class=\"comment\">//也就是改了一下函数的参数名称</span></div><div class=\"line\">myModule.controller(<span class=\"string\">'myCtrl'</span>,myCtrl);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"三：Angular的创建自定义的注入方式-也就是创建能被注入的服务-？\"><a href=\"#三：Angular的创建自定义的注入方式-也就是创建能被注入的服务-？\" class=\"headerlink\" title=\"三：Angular的创建自定义的注入方式(也就是创建能被注入的服务)？\"></a>三：Angular的创建自定义的注入方式(也就是创建能被注入的服务)？</h3><ul>\n<li>provider模式是策略模式和工厂模式的综合体</li>\n<li>核心目的是为了让接口和现实分离</li>\n<li>所有的provider都可以用来进行注入：provider/factory/service/constant/value</li>\n<li>以下类型的函数可以接受注入：controller/directive/filter/service/factory</li>\n<li>Angular中的”依赖注入”是通过provider和injector这两个机制联合实现的</li>\n</ul>\n<p>下面例子中html里面都是：<code>&lt;div&gt;&lt;/div&gt;</code>，下面创建服务的方法，从上到下，灵活度依次变差，因为无论是factory、service、constant还是value最终都是调用provider，(请看Angularjs源码第3922行左右的provider函数)只是他们封装了一下我们看不到而已。</p>\n<h5 id=\"provider方式？\"><a href=\"#provider方式？\" class=\"headerlink\" title=\"provider方式？\"></a>provider方式？</h5><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myModule = angular.module(<span class=\"string\">'myModule'</span>,[]);</div><div class=\"line\">myModule.provider(<span class=\"string\">'HelloAngular'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        $get : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> name = <span class=\"string\">'棒棒'</span>;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> name;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                getName : getName</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">myModule.controller(<span class=\"string\">'myCtrl'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"string\">'HelloAngular'</span>,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope,HelloAngular)</span></span>&#123;</div><div class=\"line\">        $scope.myName = HelloAngular.getName();</div><div class=\"line\">    &#125;</div><div class=\"line\">])</div></pre></td></tr></table></figure>\n<h5 id=\"factory方式？（最省事）\"><a href=\"#factory方式？（最省事）\" class=\"headerlink\" title=\"factory方式？（最省事）\"></a>factory方式？（最省事）</h5><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myModule = angular.module(<span class=\"string\">\"myModule\"</span>, []);</div><div class=\"line\">myModule.factory(<span class=\"string\">'game'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        gameName: <span class=\"string\">'棒棒'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">myModule.controller(<span class=\"string\">'myCtrl'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"string\">'game'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope,game)</span></span>&#123;</div><div class=\"line\">    $scope.myName = game.gameName</div><div class=\"line\">&#125;])</div></pre></td></tr></table></figure>\n<h5 id=\"service方式？-里面只是一个构造函数\"><a href=\"#service方式？-里面只是一个构造函数\" class=\"headerlink\" title=\"service方式？(里面只是一个构造函数)\"></a>service方式？(里面只是一个构造函数)</h5><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myModule = angular.module(<span class=\"string\">'myModule'</span>,[]);</div><div class=\"line\">myModule.service(<span class=\"string\">'HelloAngular'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'棒棒'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">myModule.controller(<span class=\"string\">'myCtrl'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"string\">'HelloAngular'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope,HelloAngular)</span></span>&#123;</div><div class=\"line\">    $scope.myName = HelloAngular.getName();</div><div class=\"line\">&#125;])</div></pre></td></tr></table></figure>","comments":true,"categories":[],"tags":[{"name":"Angularjs","slug":"Angularjs","permalink":"//www.iambangbang.club/tags/Angularjs/"}]},{"title":"ng中定义service和filter的方法","date":"2017-07-19T12:27:46.000Z","path":"2017/07/19/ng中定义service和filter的方法/","content":"<h3 id=\"angularjs子定义Service用法？\"><a href=\"#angularjs子定义Service用法？\" class=\"headerlink\" title=\"angularjs子定义Service用法？\"></a>angularjs子定义Service用法？</h3><h4 id=\"http的用法？\"><a href=\"#http的用法？\" class=\"headerlink\" title=\"$http的用法？\"></a>$http的用法？</h4><p>&emsp;&emsp;<code>$http</code>是Angularjs内置的服务，用起来可以链式调用，用法如下：<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">myMdoule.controller(<span class=\"string\">'LoadDataCtrl'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"string\">'$http'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope,$http)</span></span>&#123;</div><div class=\"line\">    $http(&#123;</div><div class=\"line\">        method : <span class=\"string\">'get'</span>,</div><div class=\"line\">        url : <span class=\"string\">'js/data.json'</span></div><div class=\"line\">    &#125;).success(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data,status,headers,config)</span></span>&#123;</div><div class=\"line\">        console.<span class=\"built_in\">log</span>(<span class=\"string\">'success.....'</span>);</div><div class=\"line\">        console.<span class=\"built_in\">log</span>(data);</div><div class=\"line\">        $scope.users = data;</div><div class=\"line\">    &#125;).<span class=\"built_in\">error</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data,status,headers,config)</span></span>&#123;</div><div class=\"line\">            console.<span class=\"built_in\">log</span>(<span class=\"string\">'error'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;])</div></pre></td></tr></table></figure></p>\n<h4 id=\"自定义service用法？\"><a href=\"#自定义service用法？\" class=\"headerlink\" title=\"自定义service用法？\"></a>自定义service用法？</h4><ul>\n<li>Service都是单例的</li>\n<li>Service由$injector负责实例化</li>\n<li>Service在整个应用的声明周期中存在，可以用来共享数据</li>\n<li>在需要使用的地方利用依赖注入机制注入Service</li>\n<li>自定义的Service需要写在内置Service后面</li>\n<li>内置Service的命名以$符号开头，自定义Service应该避免<a id=\"more\"></a>\n我们创建02providerhtml：<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"ServiceController\"</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"\"</span>&gt;</span>用户名<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入用户名\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pre</span> <span class=\"attr\">ng-show</span>=<span class=\"string\">\"username\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123;users&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>引用的js代码如下,其中$timeout是Angular内置的服务，类似的服务还有$http,$interval,下面的userListService是我们自定义的服务，调用方法为：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">userListService.userList(newUserName).success(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data,status)</span></span>&#123;</div><div class=\"line\">    $scope.users = <span class=\"keyword\">data</span>;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>所有的代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myServiceApp = angular.module(<span class=\"string\">'myServiceApp'</span>,[]);</div><div class=\"line\">myServiceApp.factory(<span class=\"string\">'userListService'</span>,[<span class=\"string\">'$http'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($http)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> doRequest = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(username,path)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> $http(&#123;</div><div class=\"line\">            method : <span class=\"string\">'get'</span>,</div><div class=\"line\">            url : <span class=\"string\">'js/data.json'</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        userList : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(username)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> doRequest(username,<span class=\"string\">'userList'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;]);</div><div class=\"line\">myServiceApp.controller(<span class=\"string\">'ServiceController'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"string\">'$timeout'</span>,<span class=\"string\">'userListService'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope,$timeout,userListService)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> timeout;</div><div class=\"line\">    $scope.$watch(<span class=\"string\">'username'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(newUserName)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(newUserName)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(timeout)&#123;</div><div class=\"line\">                $timeout.cancel(timeout);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        timeout = $timeout(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            userListService.userList(newUserName).success(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data,status)</span></span>&#123;</div><div class=\"line\">                $scope.users = data;</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;,<span class=\"number\">350</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;])</div></pre></td></tr></table></figure></p>\n<h4 id=\"filter和自定义的filter？\"><a href=\"#filter和自定义的filter？\" class=\"headerlink\" title=\"filter和自定义的filter？\"></a>filter和自定义的filter？</h4><p>html内容如下：<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;<span class=\"number\">1304375948024</span> | date&#125;&#125; &lt;br&gt;</div><div class=\"line\">&#123;&#123;<span class=\"number\">1304385948024</span> | date:<span class=\"string\">\"MM/dd/yyyy @ h:mma\"</span>&#125;&#125;   &lt;br&gt;</div><div class=\"line\">&#123;&#123;<span class=\"number\">1304375648024</span> | date:<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>&#125;&#125;   &lt;br&gt;</div><div class=\"line\">自定义filter：&#123;&#123;<span class=\"string\">'大漠孤烟直'</span> | filter1&#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>03.filter.js自定义如下：<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myModule = angular.module(<span class=\"string\">'myModule'</span>,[]);</div><div class=\"line\">myModule.filter(<span class=\"string\">'filter1'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> item + <span class=\"string\">'༺王者༻'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Service总结：</p>\n<ul>\n<li>$compile：编译服务</li>\n<li>$filter：数据格式化工具内置了8个</li>\n<li>$interval</li>\n<li>$timeout</li>\n<li>$local</li>\n<li>$location</li>\n<li>$location</li>\n<li>$log</li>\n<li>$parse</li>\n<li>$http ：封装了ajax</li>\n</ul>\n","comments":true,"categories":[],"tags":[{"name":"Angularjs","slug":"Angularjs","permalink":"//www.iambangbang.club/tags/Angularjs/"}]},{"title":"scope的绑定策略","date":"2017-07-18T05:31:38.000Z","path":"2017/07/18/scope的绑定策略/","content":"<h3 id=\"初探scope的用法？\"><a href=\"#初探scope的用法？\" class=\"headerlink\" title=\"初探scope的用法？\"></a>初探scope的用法？</h3><p>我们创建一个例子：<br>在第一个html文件中：<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">&lt;hello&gt;</span><span class=\"section\">&lt;/hello&gt;</span></div><div class=\"line\"><span class=\"section\">&lt;hello&gt;</span><span class=\"section\">&lt;/hello&gt;</span></div><div class=\"line\"><span class=\"section\">&lt;hello&gt;</span><span class=\"section\">&lt;/hello&gt;</span></div><div class=\"line\"><span class=\"section\">&lt;hello&gt;</span><span class=\"section\">&lt;/hello&gt;</span></div></pre></td></tr></table></figure></p>\n<p>js代码：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myModule = angular.module(<span class=\"symbol\">'myModule</span>',[]);</div><div class=\"line\">myModule.directive(<span class=\"symbol\">'hello</span>',<span class=\"keyword\">function</span>()&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        scope : &#123;&#125;,</div><div class=\"line\">        restrict : '<span class=\"type\">AE</span>',</div><div class=\"line\">        template : '&lt;<span class=\"type\">div</span>&gt;&lt;input <span class=\"keyword\">type</span>=<span class=\"string\">\"text\"</span> ng-model=<span class=\"string\">\"userName\"</span> /&gt;&#123;&#123;userName&#125;&#125;&lt;/div&gt;',</div><div class=\"line\">        replace : <span class=\"type\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>以上代码，当不存在<code>scope:{}</code>的时候，在其中一个input输入，其他都发生变化，当存在的时候，输入一个，其他不发生变化。</p>\n<h3 id=\"scope的绑定策略有三种方法？\"><a href=\"#scope的绑定策略有三种方法？\" class=\"headerlink\" title=\"scope的绑定策略有三种方法？\"></a><code>scope</code>的绑定策略有三种方法？</h3><ul>\n<li><p><code>@</code> ：把当前属性作为字符串传递，你还可以绑定来自外层<code>scope</code>的值，在属性值中插入双括号即可，此方法是单项绑定；</p>\n</li>\n<li><p><code>=</code> ：与父scope中的属性进行双向绑定</p>\n</li>\n<li><p><code>&amp;</code> ：传递来自父scope的函数，稍后再调用.</p>\n<a id=\"more\"></a>\n<h4 id=\"使用’-’的例子如下：\"><a href=\"#使用’-’的例子如下：\" class=\"headerlink\" title=\"使用’@’的例子如下：\"></a>使用’@’的例子如下：</h4><p><code>02scope@html</code>内容：</p>\n</li>\n</ul>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"myCtrl\"</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">drink</span> <span class=\"attr\">flavor</span>=<span class=\"string\">\"</span></span><span class=\"template-variable\">&#123;&#123;ctrlFlavor&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">drink</span>&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>02scope@.js</code>内容：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myModule = angular.module(<span class=\"string\">'myModule'</span>,[]);</div><div class=\"line\">myModule.controller(<span class=\"string\">'myCtrl'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope)</span></span>&#123;</div><div class=\"line\">    $scope.ctrlFlavor = <span class=\"string\">'百事可乐'</span>;</div><div class=\"line\">    $scope.ctrlFlavor2 = <span class=\"string\">'可口可乐'</span>;</div><div class=\"line\">&#125;]);</div><div class=\"line\">myModule.directive(<span class=\"string\">'drink'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        restrict : <span class=\"string\">'AE'</span>,</div><div class=\"line\">        scope : &#123;</div><div class=\"line\">            flavor: <span class=\"string\">'@flavor'</span>  <span class=\"comment\">//传递的是字符串,把当前属性作为字符串传递,效果和下面的link属性的效果一样。</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        template : <span class=\"string\">'&lt;div&gt;&#123;&#123;flavor&#125;&#125;&lt;/div&gt;'</span>,</div><div class=\"line\">          <span class=\"comment\">// link : function(scope,element,attrs)&#123;</span></div><div class=\"line\">        <span class=\"comment\">//     console.log(attrs)</span></div><div class=\"line\">        <span class=\"comment\">//     scope.flavor = attrs.flavor;</span></div><div class=\"line\">        <span class=\"comment\">// &#125;,  </span></div><div class=\"line\">        controller : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope)</span></span>&#123;</div><div class=\"line\">            console.log($scope.flavor); <span class=\"comment\">//百事可乐</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"使用-的例子如下：\"><a href=\"#使用-的例子如下：\" class=\"headerlink\" title=\"使用=的例子如下：\"></a>使用<code>=</code>的例子如下：</h4><p>需要注意的是,=和@的区别是：html中<code>&lt;drink flavor2=&quot;ctrlFlavor&quot;&gt;&lt;/drink&gt;</code>中的<code>flavor2=&quot;ctrlFlavor&quot;</code>必须为双引号，不能为,而且 = 可以传递父scope的对象，而 @ 只能为数据<br><code>03scope=.html</code>内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"myCtrl\"</span>&gt;</span></div><div class=\"line\">    Ctrl : <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"ctrlFlavor\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">    Directive : <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">drink</span> <span class=\"attr\">flavor2</span>=<span class=\"string\">\"ctrlFlavor\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">drink</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p> <code>03scope=.js</code>内容：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myModule = angular.module(<span class=\"string\">'myModule'</span>,[]);</div><div class=\"line\">myModule.controller(<span class=\"string\">'myCtrl'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope)</span></span>&#123;</div><div class=\"line\">    $scope.ctrlFlavor = <span class=\"string\">'百事可乐'</span>;</div><div class=\"line\">&#125;]);</div><div class=\"line\">myModule.directive(<span class=\"string\">'drink'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        restrict : <span class=\"string\">'AE'</span>,</div><div class=\"line\">        scope : &#123;</div><div class=\"line\">            flavor2 : <span class=\"string\">'='</span>   <span class=\"comment\">//与父scope中的属性进行双向绑定</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        template : <span class=\"string\">'&lt;input type=\"text\" ng-model=\"flavor2\"/&gt;'</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"使用-amp-的例子如下：\"><a href=\"#使用-amp-的例子如下：\" class=\"headerlink\" title=\"使用&amp;的例子如下：\"></a>使用&amp;的例子如下：</h4><p> <code>04scope&amp;.html</code>内容如下所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"myCtrl\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">greeting</span> <span class=\"attr\">greet</span>=<span class=\"string\">\"sayHello(name)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">greeting</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">greeting</span> <span class=\"attr\">greet</span>=<span class=\"string\">\"sayHello(name)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">greeting</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">greeting</span> <span class=\"attr\">greet</span>=<span class=\"string\">\"sayHello(name)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">greeting</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>04scope&amp;.js</code>内容：<br>我们知道，template中的表达式使我们自定义的内部作用域即 <code>&#39;&lt;input type=&quot;text&quot; ng-model=&quot;userName&quot; /&gt;  &#39;+&#39;&lt;button class=&quot;btn btn-default&quot; ng-click=&quot;greet({name:userName})&quot;</code>,而<code>&lt;greeting greet=&quot;sayHello(name)&quot;&gt;&lt;/greeting&gt;</code>就是自定义指令的外部作用域，两者之间的桥梁就是scope所定义的关系：<code>greet : &#39;&amp;&#39;</code>,相当于把 外部作用域的sayHello函数通过greet赋值给了ng-click中的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myModule = angular.module(<span class=\"string\">'myModule'</span>,[]).myModule.controller(<span class=\"string\">'myCtrl'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">    $scope.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello\"</span> + name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;]);</div><div class=\"line\">myModule.directive(<span class=\"string\">'greeting'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">restrict</span> : <span class=\"string\">'AE'</span>,</div><div class=\"line\">        <span class=\"attr\">scope</span> : &#123;</div><div class=\"line\">            <span class=\"attr\">greet</span> : <span class=\"string\">'&amp;'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">template</span> : <span class=\"string\">'&lt;input type=\"text\" ng-model=\"userName\" /&gt;  '</span>+</div><div class=\"line\">                    <span class=\"string\">'&lt;button class=\"btn btn-default\" ng-click=\"greet(&#123;name:userName&#125;)\" &gt;Greet&lt;/button&gt;&lt;/br&gt;&lt;br/&gt;'</span>,</div><div class=\"line\">        <span class=\"attr\">link</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope,element,attrs</span>)</span>&#123;</div><div class=\"line\">            element.on(<span class=\"string\">'input'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(attrs.greet)</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>github源码：<a href=\"https://github.com/flyingpig2016/angular-demos/tree/master/04scope\" target=\"_blank\" rel=\"external\">04scope</a> —— scope绑定策略</p>\n","comments":true,"categories":[],"tags":[{"name":"Angularjs","slug":"Angularjs","permalink":"//www.iambangbang.club/tags/Angularjs/"}]},{"title":"link属性","date":"2017-07-18T04:57:30.000Z","path":"2017/07/18/link属性/","content":"<h2 id=\"Angular中指令与控制器之间的交互，（link属性使用）\"><a href=\"#Angular中指令与控制器之间的交互，（link属性使用）\" class=\"headerlink\" title=\"Angular中指令与控制器之间的交互，（link属性使用）\"></a>Angular中指令与控制器之间的交互，（link属性使用）</h2><p>&emsp;&emsp;link属性值为一个函数,link函数主要用于操作dom元素,给dom元素绑定事件和监听,这个函数有五个参数:scope,element,attrs,ctrl,linker</p>\n<ul>\n<li>scope: 指令所在的作用域,这个scope和指令定义的scope是一致的.至于指令的scope,会在讲解scope属性的时候详细解释</li>\n<li>element: 指令元素的jqLite封装.(也就是说iEle可以调用angular封装的简版jq的方法和属性.)</li>\n<li>attrs: 指令元素的属性的集合</li>\n<li>ctrl : 需要和require属性一起使用,用于调用其他指令的方法,指令之间的互相通信,这个在讲require属性的时候会详细解释</li>\n<li>linker:也就是transclude()函数,可以用于得到指令中需要被嵌入的html内容</li>\n</ul>\n<h3 id=\"认识link属性的scope、element、attrs方法？\"><a href=\"#认识link属性的scope、element、attrs方法？\" class=\"headerlink\" title=\"认识link属性的scope、element、attrs方法？\"></a>认识link属性的scope、element、attrs方法？</h3><p>下面举个例子：<br>当我们在01link.html加入：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"myCtrl\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">loader\"</span>&gt;</span>滑动加载<span class=\"tag\">&lt;/<span class=\"name\">loader</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>创建01link.js:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myModule = angular.module(<span class=\"string\">'myModule'</span>,[]);</div><div class=\"line\">myModule.controller(<span class=\"string\">'myCtrl'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope)</span></span>&#123;</div><div class=\"line\">    $scope.loadData = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        console.log(<span class=\"string\">'loadData 加载数据中11111....'</span>);</div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;]);</div><div class=\"line\">myModule.directive(<span class=\"string\">'loader'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;    </div><div class=\"line\">        restrict : <span class=\"string\">'AE'</span>,</div><div class=\"line\">        link : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope,element,attrs)</span></span>&#123;</div><div class=\"line\">            element.bind(<span class=\"string\">'mouseenter'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">                scope.loadData();</div><div class=\"line\">                scope.$apply(<span class=\"string\">'loadData()'</span>);<span class=\"comment\">//和上面一句作用一样</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这时候，鼠标移动到标签上，控制台输出loadData 加载数据中11111….；<br>但是<code>scope.loadData()</code>和<code>scope.$apply(&#39;loadData&#39;)</code>总是有区别的，当我们的html多加一个loader标签，并且处理不同的事务，就需要加入属性来区别：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"myCtrl\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">loader</span> <span class=\"attr\">hoToLoad</span>=<span class=\"string\">\"loadData()\"</span>&gt;</span>滑动加载<span class=\"tag\">&lt;/<span class=\"name\">loader</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"myCtrl2\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">loader</span> <span class=\"attr\">hotoload</span>=<span class=\"string\">\"loadData2()\"</span>&gt;</span>滑动加载<span class=\"tag\">&lt;/<span class=\"name\">loader</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<pre><code>想要两个滑动加载标签都响应，就需改变js代码：\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myModule = angular.module(<span class=\"string\">'myModule'</span>,[]);</div><div class=\"line\">myModule.controller(<span class=\"string\">'myCtrl'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope)</span></span>&#123;</div><div class=\"line\">    $scope.loadData = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        console.log(<span class=\"string\">'loadData 加载数据中11111....'</span>);</div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;]);</div><div class=\"line\">myModule.controller(<span class=\"string\">'myCtrl2'</span>,[<span class=\"string\">'$scope'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope)</span></span>&#123;</div><div class=\"line\">    $scope.loadData2 = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        console.log(<span class=\"string\">'loadData2 加载数据中2222....'</span>);</div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;]);</div><div class=\"line\">myModule.directive(<span class=\"string\">'loader'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;    </div><div class=\"line\">        restrict : <span class=\"string\">'AE'</span>,</div><div class=\"line\">        link : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope,element,attrs)</span></span>&#123;</div><div class=\"line\">            element.bind(<span class=\"string\">'mouseenter'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">                <span class=\"comment\">// scope.loadData();</span></div><div class=\"line\">                <span class=\"comment\">// scope.$apply('loadData()')</span></div><div class=\"line\">                scope.$apply(attrs.hotoload); <span class=\"comment\">//注意js中需要写成小写，html中可以是大写</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</code></pre><h3 id=\"认识link属性的ctrl方法？-指令之间怎样交互\"><a href=\"#认识link属性的ctrl方法？-指令之间怎样交互\" class=\"headerlink\" title=\"认识link属性的ctrl方法？ (指令之间怎样交互)\"></a>认识link属性的ctrl方法？ (指令之间怎样交互)</h3><p>&emsp;&emsp;当我们用到link中ctrl属性的时候，就是指令与指令之间的交互，一个指令用到另一个指令的控制器，再举个例子：<br>html中我们引入bootstrap.css和Angular.js,</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"col-md-3\"</span>&gt;</div><div class=\"line\">        &lt;superman strength&gt;动感超人<span class=\"comment\">---力量&lt;/superman&gt;</span></div><div class=\"line\">    &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"col-md-3\"</span>&gt;</div><div class=\"line\">        &lt;superman strength speed&gt;动感超人<span class=\"number\">2</span><span class=\"comment\">----力量+敏捷&lt;/superman&gt;</span></div><div class=\"line\">    &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">    &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"col-md-3\"</span>&gt;</div><div class=\"line\">        &lt;superman strength speed light&gt;动感超人<span class=\"number\">3</span><span class=\"comment\">---力量+敏捷+发光&lt;/superman&gt;</span></div><div class=\"line\">    &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</div></pre></td></tr></table></figure>\n<p>js代码如下，需要注意的点：</p>\n<ul>\n<li>scope属性：创建独立的作用域；</li>\n<li>require : ‘^superman’,表示strength指令依赖Superman指令，也就是说，当用到require指令的时候才能够使用到link里面的ctrl属性，因位这个ctrl属性来自require所引入的依赖。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myModule = angular.module(<span class=\"string\">'myModule'</span>,[]);</div><div class=\"line\">myModule.directive(<span class=\"string\">'superman'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        scope : &#123;&#125;, <span class=\"comment\">//创建独立作用域</span></div><div class=\"line\">        restrict : <span class=\"string\">'AE'</span>,</div><div class=\"line\">        controller : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($scope)</span></span>&#123;<span class=\"comment\">//指令内部Controller,给指令暴露出public方法，提供外部调用</span></div><div class=\"line\">            $scope.abilities = [];</div><div class=\"line\">            this.addStrength = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">                $scope.abilities.push(<span class=\"string\">'strength'</span>);</div><div class=\"line\">            &#125;;</div><div class=\"line\">            this.addSpeed = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">                $scope.abilities.push(<span class=\"string\">'speed'</span>);</div><div class=\"line\">            &#125;;</div><div class=\"line\">            this.addLight = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">                $scope.abilities.push(<span class=\"string\">'light'</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        link : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope,element,attrs)</span></span>&#123;</div><div class=\"line\">            element.addClass(<span class=\"string\">'btn btn-primary'</span>);</div><div class=\"line\">            element.bind(<span class=\"string\">'mouseenter'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">                console.log(scope.abilities);</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">myModule.directive(<span class=\"string\">'strength'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">require</span> : <span class=\"string\">'^superman'</span>, <span class=\"comment\">//表示strength指令依赖Superman指令</span></div><div class=\"line\">        link : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope,element,attrs,supermanCtrl)</span></span>&#123;</div><div class=\"line\">            supermanCtrl.addStrength();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">myModule.directive(<span class=\"string\">\"speed\"</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">require</span> : <span class=\"string\">'^superman'</span>,</div><div class=\"line\">        link : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope,element,attrs,supermanCtrl)</span></span>&#123;</div><div class=\"line\">            supermanCtrl.addSpeed();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">myModule.directive(<span class=\"string\">\"light\"</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">require</span> : <span class=\"string\">'^superman'</span>,</div><div class=\"line\">        link : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(scope,element,attrs,supermanCtrl)</span></span>&#123;</div><div class=\"line\">            supermanCtrl.addLight();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>github源码：<a href=\"https://github.com/flyingpig2016/angular-demos/tree/master/03link\" target=\"_blank\" rel=\"external\">03link</a> —— 指令和控制器、指令和指令之间的交互（link属性的使用方法）</p>\n","comments":true,"categories":[],"tags":[{"name":"Angularjs","slug":"Angularjs","permalink":"//www.iambangbang.club/tags/Angularjs/"}]},{"title":"directive-自定义指令的方法.md","date":"2017-07-18T03:14:38.000Z","path":"2017/07/18/directive-自定义指令的方法/","content":"<p><b>This is a angular-demos, It can show my progress of study.</b></p>\n<h2 id=\"02directive——Angularjs的创建指令方法\"><a href=\"#02directive——Angularjs的创建指令方法\" class=\"headerlink\" title=\"02directive——Angularjs的创建指令方法\"></a>02directive——Angularjs的创建指令方法</h2><h3 id=\"restrict-值分类\"><a href=\"#restrict-值分类\" class=\"headerlink\" title=\"restrict 值分类:\"></a>restrict 值分类:</h3><ul>\n<li>E 作为元素名使用,例如：<code>&lt;hello&gt;&lt;/hello&gt;</code>  </li>\n<li>A 作为属性使用(默认),例如：<code>&lt;div hello&gt;&lt;/div&gt;</code></li>\n<li>C 作为类名使用 , 例如：<code>&lt;div class=&quot;hello&quot;&gt;&lt;/div&gt;</code></li>\n<li>M 作为注释使用,  例如：<code>&lt;!--directive:hello--&gt;</code><h3 id=\"directive的templateUrl属性\"><a href=\"#directive的templateUrl属性\" class=\"headerlink\" title=\"directive的templateUrl属性\"></a>directive的templateUrl属性</h3>通常我们这样写，template，但是如果模板里面东西很多，我们就需要独立出来一个html文件，<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">myApp.directive(<span class=\"string\">'hello'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>&#123;</div><div class=\"line\">        restrict : <span class=\"string\">'AEMC'</span>, <span class=\"comment\">//- A 作为属性使用(默认),例如：`&lt;div hello&gt;&lt;/div&gt;`</span></div><div class=\"line\">        template : <span class=\"string\">'&lt;div&gt;Hello everyone, I am bangbang!&lt;/div&gt;'</span>,</div><div class=\"line\">        replace : <span class=\"keyword\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>用templateUrl属性独立出html文件,<strong>注意：</strong>如果用longDirective命名，引用的时候用<code>&lt;long-directive&gt;&lt;/long-directive&gt;</code>,要不然就用纯小写字母</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">myApp.directive(<span class=\"string\">'longDirective'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        restrict : <span class=\"string\">'AEMC'</span>,  <span class=\"comment\">//- E 作为元素名使用,例如：`&lt;hello&gt;&lt;/hello&gt;`  </span></div><div class=\"line\">        templateUrl : <span class=\"string\">'tpls/long.html'</span>,</div><div class=\"line\">        replace : <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"templateCache-缓存模板方法\"><a href=\"#templateCache-缓存模板方法\" class=\"headerlink\" title=\"$templateCache(缓存模板方法)\"></a>$templateCache(缓存模板方法)</h3><p>&emsp;&emsp;通过angular创建的模块,都有一个run方法,注射器在加载完成所有模块的时候，该方法使用一次。接受一个函数作为参数.该函数会被执行.$templateCache是angular内置的一个服务,它的put方法用于存放模板.它接受两个参数,第一个参数为模板的名字,第一个参数为模板的名字,也就是templateUrl的值,cache.html,第二个参数就是html字符串,也就是模板的内容.<br>&emsp;&emsp;这种方法常用于模板内容是通过$http异步获取的.然后将模板放入$templateCache中以便后面使用.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">myApp.run(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($templateCache)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// $templateCache.put('tpls/cache.html','&lt;div&gt;hello everyone!!!!&lt;/div&gt;')</span></div><div class=\"line\">    $templateCache.put(<span class=\"string\">'cache.html'</span>,<span class=\"string\">'&lt;p&gt;我是缓存的模板&lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\">myApp.directive(<span class=\"string\">'cacheDirective'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($templateCache)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>&#123;</div><div class=\"line\">        restrict : <span class=\"string\">'AECM'</span>,</div><div class=\"line\">        template : $templateCache.get(<span class=\"string\">'cache.html'</span>),</div><div class=\"line\">        replace : <span class=\"keyword\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"transclude属性的使用-让创建的标签里面的内容不被替换\"><a href=\"#transclude属性的使用-让创建的标签里面的内容不被替换\" class=\"headerlink\" title=\"transclude属性的使用(让创建的标签里面的内容不被替换)\"></a>transclude属性的使用(让创建的标签里面的内容不被替换)</h3><p>下面代码让html页面中的<code>&lt;no-Replace&gt;希望我不被替换掉&lt;/no-Replace&gt;</code>里面的内容不会被替换<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">myApp.directive(<span class=\"string\">\"noReplace\"</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        restrict : <span class=\"string\">'AECM'</span>,</div><div class=\"line\">        template : <span class=\"string\">\"&lt;div&gt;Hello everyone,I am noReplace!&lt;/div&gt;&lt;div ng-transclude&gt;&lt;/div&gt;\"</span>,</div><div class=\"line\">        transclude : <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"compile与link\"><a href=\"#compile与link\" class=\"headerlink\" title=\"compile与link\"></a>compile与link</h3><p>&emsp;&emsp;Angularjs的运行流程如下所示：<br><img src=\"https://github.com/flyingpig2016/angular-demos/raw/master/02directive/img/1.jpg\" alt=\"compile与link\"></p>\n<ul>\n<li>compile函数用来对模板自身进行转换，link函数负责在模型和视图之间进行动态关联；</li>\n<li>作用域在链接阶段才会被绑定到编译之后的link函数上；</li>\n<li>compile函数仅仅在便一阶段运行一次，而对于指令的每个实例，link函数都会执行一次；</li>\n<li>compile可以返回preLink和postLink函数，而link函数只会返回postLink函数；</li>\n<li>如果需要修改DOM结构，应该在postLink中来做这件事，而如果preLink中做这件事情会导致失误，大所属时候我们只需要编写link函数即可；</li>\n</ul>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">myApp.directive(<span class=\"string\">'cpl'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        restrict : <span class=\"string\">'AECM'</span>,</div><div class=\"line\">        template : <span class=\"string\">'&lt;div&gt;Hello bangbang&lt;/div&gt;'</span>,</div><div class=\"line\">        replace : <span class=\"literal\">true</span>,</div><div class=\"line\">        compile : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">//用来对模板自身进行转换</span></div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\">        link : <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">//用来操作DOM和绑定事件监听器</span></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>githu源码：<a href=\"https://github.com/flyingpig2016/angular-demos/tree/master/02directive\" target=\"_blank\" rel=\"external\">02directive</a> —— 自定义指令的方法</p>\n","comments":true,"categories":[],"tags":[{"name":"Angularjs","slug":"Angularjs","permalink":"//www.iambangbang.club/tags/Angularjs/"}]},{"title":"AngularJs中ui-router使用方法","date":"2017-07-14T10:39:30.000Z","path":"2017/07/14/AngularJs中ui-router使用方法/","content":"<h3 id=\"一：为什么使用ui-router？\"><a href=\"#一：为什么使用ui-router？\" class=\"headerlink\" title=\"一：为什么使用ui-router？\"></a>一：为什么使用ui-router？</h3><p>&emsp;&emsp;如果使用原生router的话，也就是当我们在index.html页面引用<code>angular-route.js</code>的时候，例如：我们在index.html页面的<code>body</code>下加入<code>&lt;div class=&quot;page &quot; ng-view&gt;&lt;/div&gt;</code>，然后我们在<code>app.js</code>中写入（具体代码看文章末尾的下载链接）：<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var bookStoreApp = angular.module(<span class=\"string\">'bookStoreApp'</span>, [</div><div class=\"line\">    <span class=\"string\">'ngRoute'</span>, <span class=\"string\">'ngAnimate'</span>, <span class=\"string\">'bookStoreCtrls'</span>, <span class=\"string\">'bookStoreFilters'</span>,</div><div class=\"line\">    <span class=\"string\">'bookStoreServices'</span>, <span class=\"string\">'bookStoreDirectives'</span></div><div class=\"line\">]);</div><div class=\"line\"></div><div class=\"line\">bookStoreApp.config(<span class=\"keyword\">function</span>($routeProvider) &#123;</div><div class=\"line\">    $routeProvider.when(<span class=\"string\">'/hello'</span>, &#123;</div><div class=\"line\">        templateUrl: <span class=\"string\">'tpls/hello.html'</span>,</div><div class=\"line\">        controller: <span class=\"string\">'HelloCtrl'</span></div><div class=\"line\">    &#125;).when(<span class=\"string\">'/list'</span>, &#123;</div><div class=\"line\">        templateUrl: <span class=\"string\">'tpls/bookList.html'</span>,</div><div class=\"line\">        controller: <span class=\"string\">'BookListCtrl'</span></div><div class=\"line\">    &#125;).otherwise(&#123;</div><div class=\"line\">        redirectTo: <span class=\"string\">'/hello'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>此时，我们首页默认显示hello，当我们在页面中点击下一页链接的时候，我们跳转到以list为模板的页面。以上是简单的页面跳转，但是如果我们需要稍微复杂一点的页面，例如我们想要写个上面一个是菜单栏，菜单栏下面还有点击的页面，就像是选项卡一样，但是分别进入了不同的页面（实际上是angularjs路由机制中替换了某个模板），如下图所示：<br><img src=\"http://img.blog.csdn.net/20170714171942351?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>我们就需要用到嵌套的路由，因此，我们需要用到angularjs中ui.router模块。<br><a id=\"more\"></a></p>\n<h3 id=\"二：怎样使用ui-router？\"><a href=\"#二：怎样使用ui-router？\" class=\"headerlink\" title=\"二：怎样使用ui-router？\"></a>二：怎样使用ui-router？</h3><p>&emsp;&emsp;使用<code>ui-router</code>和<code>ngRouter</code>模块当然有很多不同的地方，例如在index.html中，我们在body中就使用<code>&lt;div ui-view=&quot;&quot;&gt;&lt;/div&gt;</code>。接下来看详细用法：<br>1.首先我们需要知道项目的目录结构：<br><img src=\"http://img.blog.csdn.net/20170714172416091?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"目录结构\"><br>其中node_modules和package.json不用多说，是git版本控制，不用也可以，app目录就是项目的入口，里面的index.html是主模板，js中的app.js是项目的入口文件，tpls目录里面存放html模板，它需要和index.html组合使用。当然，组合使用就需要路由文件的支持。<br>2.我们需要使用bower安装<code>angular-ui-router</code>模块，当然是在你的项目任意目录下面创建，使用的时候需要写好路径就好，尽量到framework里面安装，因为里面都是存放angularjs相关的js代码和文件<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bower </span><span class=\"keyword\">install </span>angular-ui-router</div></pre></td></tr></table></figure></p>\n<p>3.其次就是添加index.html文件<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"routerApp\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>BookStore<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"framework/bootstrap-3.0.0/css/bootstrap.css\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../bower_components/angular/angular.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../bower_components/angular-ui-router/release/angular-ui-router.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/app.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar navbar-inverse\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"navigation\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-header\"</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"navbar-brand\"</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"#\"</span>&gt;</span>AngularUI Router<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</span>     </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"home\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"about\"</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>接下来创建四个模板文件：about.html,home.html.home-list.html和table-data.html，代码如下：<br>home.html页面：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"jumbotron text-center\"</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This page demonstrates  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-danger\"</span>&gt;</span>nested<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>views.  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\".list\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>List<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\".paragraph\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-danger\"</span>&gt;</span>Paragraph<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>home下面有两个链接list和paragraph，这连个模板如下所示：<br>home-list.html页面：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>  </span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"topic in topics\"</span>&gt;</span><span class=\"template-variable\">&#123;&#123; topic &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>  </span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>paragraph页面在app.js里面被直接写入：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.state</span>(<span class=\"string\">'home.paragraph'</span>, &#123;</div><div class=\"line\">\t<span class=\"attribute\">url</span>: <span class=\"string\">'/paragraph'</span>,</div><div class=\"line\">\t<span class=\"attribute\">template</span>: <span class=\"string\">'I could sure use a scoop of ice-cream.2 '</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>因此，可以不用创建，如果需要更复杂的页面，就需要创建，在这里只是作为演示。</p>\n<p>4.然后我们添加about.html页面<br>about.html页面<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"jumbotron text-center\"</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>The About Page<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This page demonstrates  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-danger\"</span>&gt;</span>multiple<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>and  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-danger\"</span>&gt;</span>named<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>views.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-6\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>=<span class=\"string\">\"columnOne\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-6\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>=<span class=\"string\">\"columnTwo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>about页面里面有两个ui-view,即：columnOne和columnTwo，所以需要另一个模板table-data.html显示，该模板如下：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Ice-Creams<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>  </span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table table-hover table-striped table-bordered\"</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Cost<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"topic in topics\"</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"template-variable\">&#123;&#123; topic.name &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span>  </span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>$<span class=\"template-variable\">&#123;&#123; topic.price &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span>  </span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>5.配置页面的路由，即app.js文件<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">var routerApp = angular.module(<span class=\"string\">'routerApp'</span>, [<span class=\"string\">'ui.router'</span>]);  </div><div class=\"line\">routerApp.config([<span class=\"string\">'$stateProvider'</span>, <span class=\"string\">'$urlRouterProvider'</span>,<span class=\"keyword\">function</span>($stateProvider, $urlRouterProvider) &#123;</div><div class=\"line\">\t/*路由重定向 $urlRouterProvider:如果没有路由引擎能匹配当前的导航状态，那它就会默认将路径路由至 home.html,  </div><div class=\"line\">\t *这个页面就是状态名称被声明的地方. */</div><div class=\"line\">\t$urlRouterProvider.otherwise(<span class=\"string\">'/home'</span>);</div><div class=\"line\">\t$stateProvider</div><div class=\"line\">\t\t.state(<span class=\"string\">'home'</span>, &#123;</div><div class=\"line\">\t\t\turl: <span class=\"string\">'/home'</span>,</div><div class=\"line\">\t\t\ttemplateUrl: <span class=\"string\">'tpls/home.html'</span></div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t\t/*  nested list with custom controller*/</div><div class=\"line\">\t\t.state(<span class=\"string\">'home.list'</span>, &#123;</div><div class=\"line\">\t\t\turl: <span class=\"string\">'/list'</span>,</div><div class=\"line\">\t\t\ttemplateUrl: <span class=\"string\">'tpls/home-list.html'</span>,</div><div class=\"line\">\t\t\tcontroller: function($scope) &#123;</div><div class=\"line\">\t\t\t\t$scope.topics = [<span class=\"string\">'Butterscotch'</span>, <span class=\"string\">'Black Current'</span>, <span class=\"string\">'Mango'</span>];</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t\t// nested list with just some random string data  </div><div class=\"line\">\t\t.state(<span class=\"string\">'home.paragraph'</span>, &#123;</div><div class=\"line\">\t\t\turl: <span class=\"string\">'/paragraph'</span>,</div><div class=\"line\">\t\t\ttemplate: <span class=\"string\">'I could sure use a scoop of ice-cream.2 '</span></div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t\t.state(<span class=\"string\">'about'</span>, &#123;</div><div class=\"line\">\t\t\turl: <span class=\"string\">'/about'</span>,</div><div class=\"line\">\t\t\t/* view 用在该状态下有多个 ui-view 的情况，可以对不同的 ui-view 使用特定的 template, controller, resolve data </div><div class=\"line\">\t\t\t 绝对 view 使用 <span class=\"string\">'@'</span> 符号来区别，比如 <span class=\"string\">'columnOne@about'</span> 表明名为 <span class=\"string\">'columnOne'</span> 的 ui-view 使用了 <span class=\"string\">'about'</span> 状态的 </div><div class=\"line\">\t\t\t 模板(template)，相对 view 则无*/</div><div class=\"line\">\t\t\tviews: &#123;</div><div class=\"line\">\t\t\t\t// 无名 view  </div><div class=\"line\">\t\t\t\t<span class=\"string\">''</span>: &#123;</div><div class=\"line\">\t\t\t\t\ttemplateUrl: <span class=\"string\">'tpls/about.html'</span></div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\t// for <span class=\"string\">\"ui-view='columnOne'\"</span>  </div><div class=\"line\">\t\t\t\t<span class=\"string\">'columnOne@about'</span>: &#123;</div><div class=\"line\">\t\t\t\t\ttemplate: <span class=\"string\">'这里是第一列的内容'</span></div><div class=\"line\">\t\t\t\t&#125;,</div><div class=\"line\">\t\t\t\t// for <span class=\"string\">\"ui-view='columnTwo'\"</span>  </div><div class=\"line\">\t\t\t\t<span class=\"string\">'columnTwo@about'</span>: &#123;</div><div class=\"line\">\t\t\t\t\ttemplateUrl: <span class=\"string\">'tpls/table-data.html'</span>,</div><div class=\"line\">\t\t\t\t\tcontroller: <span class=\"string\">'table-Controller'</span></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">&#125;]);</div><div class=\"line\">routerApp.controller(<span class=\"string\">'table-Controller'</span>, <span class=\"keyword\">function</span>($scope) &#123;</div><div class=\"line\">\t$scope.message = <span class=\"string\">'test'</span>;</div><div class=\"line\">\t$scope.topics = [&#123;</div><div class=\"line\">\t\tname: <span class=\"string\">'Butterscotch'</span>,</div><div class=\"line\">\t\tprice: <span class=\"number\">50</span></div><div class=\"line\">\t&#125;, &#123;</div><div class=\"line\">\t\tname: <span class=\"string\">'Black Current'</span>,</div><div class=\"line\">\t\tprice: <span class=\"number\">100</span></div><div class=\"line\">\t&#125;, &#123;</div><div class=\"line\">\t\tname: <span class=\"string\">'Mango'</span>,</div><div class=\"line\">\t\tprice: <span class=\"number\">20</span></div><div class=\"line\">\t&#125;];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>最后写一下需要学习更多的童鞋，github网址：<a href=\"https://github.com/angular-ui/ui-router\" target=\"_blank\" rel=\"external\">angular-ui/ui-router的github链接地址</a><br>我的代码备份：<a href=\"http://download.csdn.net/detail/flyingpig2016/9899101\" target=\"_blank\" rel=\"external\">angularjs中ui.router和ngRouter模块的用法</a></p>\n","comments":true,"categories":[],"tags":[{"name":"Angularjs","slug":"Angularjs","permalink":"//www.iambangbang.club/tags/Angularjs/"}]},{"title":"js-touch事件及gesture-手势-事件详解","date":"2017-07-10T05:49:49.000Z","path":"2017/07/10/js-touch事件及gesture-手势-事件详解/","content":"<h3 id=\"一：touch事件分类？\"><a href=\"#一：touch事件分类？\" class=\"headerlink\" title=\"一：touch事件分类？\"></a>一：touch事件分类？</h3><ol>\n<li>touchstart：当手指触摸屏幕时触发。不管有多少个手指放在了屏幕上，只要再触摸一下屏幕就会触发。在此，我用小米的google浏览器做了一个实验，添加一个计数器，用来查看屏幕上手指触摸的次数，代码如下：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchstart'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">\t\tmyDiv.innerHTML = <span class=\"string\">'触屏的次数：'</span>+ i++;</div><div class=\"line\">\t&#125;,<span class=\"literal\">false</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>2.touchmove：当手指在屏幕上滑动的时候触发该是事件，在这期间可以通过event.preventDefault()来阻止滚动；<br><a id=\"more\"></a><br>3.touchend：手指从屏幕中移开的时候触发；<br>4.touchcancel：当系统停止跟踪触摸时触发。（不做说明）<br>例如我们在手机屏幕上利用前面三个事件来获取手指的位置，压力，接触面的值：效果如下：<br><img src=\"http://img.blog.csdn.net/20161219191933181?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>html和css代码：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width,height=device-height, user-scalable=no,initial-scale=1, minimum-scale=1, maximum-scale=1 \"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\">\t\t<span class=\"selector-id\">#myDiv</span>&#123;<span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;&#125;</div><div class=\"line\">\t\t<span class=\"selector-id\">#myDiv2</span>&#123;<span class=\"attribute\">width</span>:<span class=\"number\">40px</span>;<span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;<span class=\"attribute\">border-radius</span>: <span class=\"number\">20px</span>; <span class=\"attribute\">background-color</span>:deeppink;<span class=\"attribute\">position</span>: absolute;<span class=\"attribute\">top</span>:<span class=\"number\">0</span>;<span class=\"attribute\">left</span>:<span class=\"number\">0</span>;<span class=\"attribute\">z-index</span>:<span class=\"number\">0</span>&#125;</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myDivStart\"</span>&gt;</span>Touch start(0, 0)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myDivmove\"</span>&gt;</span>Touch move(0, 0)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myDivend\"</span>&gt;</span>Touch end(0, 0)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myradius\"</span>&gt;</span>Touch radius(0, 0)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"force\"</span>&gt;</span>Touch force：<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"rotateAngle\"</span>&gt;</span>Touch rotationAngle：<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myDiv2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>js代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">touchEvent</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">\tevent = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">\t<span class=\"keyword\">var</span> mydiv2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myDiv2'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> myDivStart = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myDivStart'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> myDivmove = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myDivmove'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> myDivend = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myDivend'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> myradius = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myradius'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> force = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'force'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> rotationAngle = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'rotateAngle'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> coordinateX = event.changedTouches[<span class=\"number\">0</span>].clientX;</div><div class=\"line\">\t<span class=\"keyword\">var</span> coordinateY = event.changedTouches[<span class=\"number\">0</span>].clientY;\t</div><div class=\"line\">\t</div><div class=\"line\">\tmydiv2.style.left = <span class=\"built_in\">parseFloat</span>(coordinateX)<span class=\"number\">-20</span> + <span class=\"string\">'px'</span>;\t</div><div class=\"line\">\tmydiv2.style.top = <span class=\"built_in\">parseFloat</span>(coordinateY)<span class=\"number\">-20</span> + <span class=\"string\">'px'</span>;</div><div class=\"line\">\tmyradius.innerHTML = <span class=\"string\">\"Touch radius：(\"</span> + event.changedTouches[<span class=\"number\">0</span>].radiusX.toFixed(<span class=\"number\">2</span>) + <span class=\"string\">' ,'</span> + event.changedTouches[<span class=\"number\">0</span>].radiusY.toFixed(<span class=\"number\">2</span>) + <span class=\"string\">\")\"</span>;</div><div class=\"line\">\trotationAngle.innerHTML = <span class=\"string\">\"Touch rotationAngle：\"</span> + event.changedTouches[<span class=\"number\">0</span>].rotationAngle;</div><div class=\"line\">\tforce.innerHTML = <span class=\"string\">\"Touch force：\"</span> + event.changedTouches[<span class=\"number\">0</span>].force.toFixed(<span class=\"number\">3</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> intX = <span class=\"built_in\">parseInt</span>(coordinateX);</div><div class=\"line\">\t<span class=\"keyword\">var</span> intY = <span class=\"built_in\">parseInt</span>(coordinateY);</div><div class=\"line\">\t<span class=\"keyword\">switch</span>(event.type)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"touchstart\"</span> :</div><div class=\"line\">\t\t\tmyDivStart.innerHTML = <span class=\"string\">\"Touch started：(\"</span> + event.touches[<span class=\"number\">0</span>].clientX.toFixed(<span class=\"number\">2</span>) + <span class=\"string\">' ,'</span> + event.touches[<span class=\"number\">0</span>].clientY.toFixed(<span class=\"number\">2</span>) + <span class=\"string\">\")\"</span>;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(event);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"touchmove\"</span> :</div><div class=\"line\">\t\t\tevent.preventDefault();<span class=\"comment\">//\t阻止滚动</span></div><div class=\"line\">\t\t\tmyDivmove.innerHTML = <span class=\"string\">\"Touch moved：(\"</span> + intX + <span class=\"string\">' ,'</span> + intY + <span class=\"string\">\")\"</span>;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(event);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"touchend\"</span> :</div><div class=\"line\">\t\t\tmyDivend.innerHTML = <span class=\"string\">\"Touch end：(\"</span> + intX + <span class=\"string\">' ,'</span> + intY + <span class=\"string\">\")\"</span>;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(event);</div><div class=\"line\">\t\t\tmyradius.innerHTML = <span class=\"string\">\"Touch radius：(0.00,0.00)\"</span></div><div class=\"line\">\t\t\tforce.innerHTML = <span class=\"string\">\"Touch force：0.00\"</span> ;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"touchstart\"</span>,touchEvent,<span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"touchmove\"</span>,touchEvent,<span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"touchend\"</span>,touchEvent,<span class=\"literal\">false</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"二：touch事件对应的event对象有哪些？\"><a href=\"#二：touch事件对应的event对象有哪些？\" class=\"headerlink\" title=\"二：touch事件对应的event对象有哪些？**\"></a>二：touch事件对应的event对象有哪些？**</h3><p>&emsp;&emsp;根据上面的代码，可以得到，当触发touch事件的时候，会生成一个TouchEvent对象，如下图：<br><img src=\"http://img.blog.csdn.net/20161219140856227?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>常见的有上面划线三种属性，在做一些效果的时候，也是用以下的三个属性中的touchList对象来确定元素的所有信息。<br>1.touches：表示当前跟踪的触摸操作的touch对象的属性；<br>2.targetTouches：表示特定事件目标的Touch对象的数组。<br>3.changeTouches：表示从上一次触摸以来，发生了改变的touch对象的数组。<br>&emsp;&emsp;以上这些属性都是一个包含名为TouchList的对象，当触发点为1(即：event.touches.length ===event.targetTouches.lengh ===event.changeTouches.length)的时候，它们包含触摸点的所有信息,但是这时候虽然包含信息一样，但是执行(event.targetTouches == event.touches)返回值为false，那就是说，里面肯定有一些地方不相同，暂时还没有找到，如下图所示：<br><img src=\"http://img.blog.csdn.net/20161219141651698?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>下面是一些被触摸位置的一些重要属性：</p>\n<ul>\n<li>clientX和clientY属性：相对于视口的坐标；</li>\n<li>identifier：标识触摸的唯一id；</li>\n<li>pageX和pageY：相对于页面的坐标；</li>\n<li>screenX和screenY：相对于屏幕的坐标；</li>\n<li>radiusX和radiusY：能够包围用户和触摸平面的接触面的最小椭圆的水平轴(X轴)半径和垂直轴(Y轴)半径；</li>\n<li>rotationAngle ：这个属性和 Touch.radiusX ,  Touch.radiusY一起, 描述了用户和触摸平面的接触面.</li>\n<li>force：返回这个 Touch 对象对应的手指挤压触摸平面的压力大小, 从0.0(没有压力)到1.0(最大压力)的浮点数.</li>\n<li>target：触摸的DOM节点目标。<br><strong>注意：</strong>在touchend事件发生时，touches属性和targetTouches属性中的touchList对象就没有任何东西了，所以，这时候要想取得触发点的信息，<strong>就必须使用changeTouches属性。</strong><h3 id=\"三：touch、mouse和click事件触发顺序？\"><a href=\"#三：touch、mouse和click事件触发顺序？\" class=\"headerlink\" title=\"三：touch、mouse和click事件触发顺序？**\"></a>三：touch、mouse和click事件触发顺序？**</h3>&emsp;&emsp;touch事件和click事件触发顺序：<br>1.touchstart事件；<br>2.mouseover事件；<br>3.mousemove事件(一次)；<br>4.mousedown事件；<br>5.mouseup事件；<br>6.click事件；<br>7.touchend事件。<br>兼容性：iOS版的Safari、Android版的webkit、bada版的Dolfin、OS6中的BlackBerry webkit、Opera中的Mobile10.1 和 LG专有的PHantom浏览器。但是只有IOS的Safari支持多点触摸。桌面版本的Firefox6+和Chrome也支持触摸。<h3 id=\"四：iOS2-0中的手势事件：gesture事件\"><a href=\"#四：iOS2-0中的手势事件：gesture事件\" class=\"headerlink\" title=\"四：iOS2.0中的手势事件：gesture事件**\"></a>四：iOS2.0中的手势事件：gesture事件**</h3>&emsp;&emsp;<strong>注意</strong>：下面的事件只能在iOS中运行。在iOS中档两个手指操作的时候，就会产生手势，手势通常用于改变显示元素的大小，或者旋转显示的元素。手势事件分为三种：<br>1.gesturestart：当一个手指已经按在屏幕上，另一个手指又触摸屏幕的时候触发。类似于touchstart的作用一样；<br>2.gesturechange：当触摸屏幕的任何一个手指的位置发生变化的时候触发。<br>3.gestureend：当任何一个手指从屏幕上面移开时触发。<br>下面这些代码在安卓上不能用，只有在iOS上可以使用：<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mydiv = document.getElementById(<span class=\"string\">'myDiv'</span>);</div><div class=\"line\"><span class=\"function\">function <span class=\"title\">gesture</span>(<span class=\"params\"><span class=\"keyword\">event</span></span>)</span>&#123;</div><div class=\"line\">\tconsole.log(<span class=\"keyword\">event</span>)</div><div class=\"line\">\t<span class=\"keyword\">switch</span>(<span class=\"keyword\">event</span>.type)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"gesturestart\"</span> : </div><div class=\"line\">\t\t\tmydiv.innerHTML = <span class=\"string\">\"gesture start (rotation=\"</span> + <span class=\"keyword\">event</span>.rotation + <span class=\"string\">',scale='</span> + <span class=\"keyword\">event</span>.scale + <span class=\"string\">')'</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"gesturechange\"</span> :</div><div class=\"line\">\t\t\tmydiv.innerHTML = <span class=\"string\">\"gesture change (rotation=\"</span> + <span class=\"keyword\">event</span>.rotation + <span class=\"string\">',scale='</span> + <span class=\"keyword\">event</span>.scale + <span class=\"string\">')'</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"gestureend\"</span> :</div><div class=\"line\">\t\t\tmydiv.innerHTML = <span class=\"string\">\"gesture end (rotation=\"</span> + <span class=\"keyword\">event</span>.rotation + <span class=\"string\">',scale'</span> + <span class=\"keyword\">event</span>.scale + <span class=\"string\">')'</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">document.addEventListener(<span class=\"string\">'gesturestart'</span>,gesture,<span class=\"literal\">false</span>);</div><div class=\"line\">document.addEventListener(<span class=\"string\">'gesturechange'</span>,gesture,<span class=\"literal\">false</span>);</div><div class=\"line\">document.addEventListener(<span class=\"string\">'gestureend'</span>,gesture,<span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","comments":true,"categories":[],"tags":[{"name":"javascript高级程序设计","slug":"javascript高级程序设计","permalink":"//www.iambangbang.club/tags/javascript高级程序设计/"}]},{"title":"js工厂模式、构造函数以及他们创建对象的优缺点","date":"2017-07-10T05:44:07.000Z","path":"2017/07/10/js工厂模式、构造函数以及他们创建对象的优缺点/","content":"<h3 id=\"工厂模式和构造函数的区别\"><a href=\"#工厂模式和构造函数的区别\" class=\"headerlink\" title=\"工厂模式和构造函数的区别\"></a>工厂模式和构造函数的区别</h3><blockquote>\n<p>学习JavaScript有一段时间了，但是随着工作的进展，我发现，JavaScript绝对不是写一下简单效果那么肤浅，是时候完全，透彻地理解他的精髓了。</p>\n</blockquote>\n<p>好了，让俺老猪带你装逼带你飞吧！</p>\n<h3 id=\"一：为什么使用工厂模式和构造函数？\"><a href=\"#一：为什么使用工厂模式和构造函数？\" class=\"headerlink\" title=\"一：为什么使用工厂模式和构造函数？**\"></a>一：为什么使用工厂模式和构造函数？**</h3><p>&emsp;&emsp;虽然Object构造函数或者字面量(var person={})可以创建单个对象，但是，他有一个明显的缺点，那就是：重复造轮子，产生大量的重复性代码，为了解决这个问题，我们就开始使用工厂模式和构造函数模式。</p>\n<h3 id=\"二：什么是工厂模式？它有什么优缺点？\"><a href=\"#二：什么是工厂模式？它有什么优缺点？\" class=\"headerlink\" title=\"二：什么是工厂模式？它有什么优缺点？**\"></a>二：什么是工厂模式？它有什么优缺点？**</h3><p>&emsp;&emsp;1.顾名思义，工厂模式就是像工厂一样来创建对象。但这样的解释似乎有点欠妥，高大上一点，工厂模式其实是软件领域中一种广为人知的一种设计模式，这种模式抽象了创建具体对象的过程。开发人员发明了一种函数，用函数来大量创建对象的方法；<br><a id=\"more\"></a><br>2.工厂模式例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name,age,say</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> obj1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">\tobj1.name = name;</div><div class=\"line\">\tobj.age = age;</div><div class=\"line\">\tobj.say = say;</div><div class=\"line\">\tobj.should = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\talert(<span class=\"keyword\">this</span>.say);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> obj;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> person1 = createPerson(<span class=\"string\">'bangbang'</span>,<span class=\"number\">18</span>,<span class=\"string\">'脚踏实地才能壮志凌云！'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = createPerson(<span class=\"string\">'yanniu'</span>,<span class=\"number\">18</span>,<span class=\"string\">'我相信你可以！'</span>);</div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;但是工厂模式可以创建多个相似的对象，但是却没有解决对象的识别问题(不知道这个对象的类型)。相信这句话还需要探究，不要急，接下来看那看构造函数模式，你就会理解。</p>\n<h3 id=\"三：什么是构造函数模式，它和工厂模式比较有哪些好处？它自身又有那些缺点？\"><a href=\"#三：什么是构造函数模式，它和工厂模式比较有哪些好处？它自身又有那些缺点？\" class=\"headerlink\" title=\"三：什么是构造函数模式，它和工厂模式比较有哪些好处？它自身又有那些缺点？**\"></a>三：什么是构造函数模式，它和工厂模式比较有哪些好处？它自身又有那些缺点？**</h3><p>&emsp;&emsp;1.实例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreatePerson</span>(<span class=\"params\">name, age, say</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.say = say;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.should = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>(<span class=\"keyword\">this</span>.say);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">'bangbang'</span>,<span class=\"number\">18</span>,<span class=\"string\">'修身，齐家，天下很太平'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">'yanniu'</span>,<span class=\"number\">18</span>,<span class=\"string\">'吃地沟油的命，操中南海的心'</span>);</div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;这个例子中，CreatePerson()函数取代了createPerson()函数；睁大你的两个招子，第二个CreatePerson()明显是开头大写，这是构造函数的惯例，为了区分和普通函数的区别，因为构造函数也是函数，只不过可以创建对象而已。和工厂模式不同之处看最后一点，不要着急，先自己感悟一下，先说出来就没有味道了，嘿嘿！<br>2.要创建CreatePerson()的新实例，必须使用new，即和使用var person1  = new Object()差不多，实际上会经历一些步骤：</p>\n<ul>\n<li>创建一个新的对象；</li>\n<li>将构造函数作用域赋给新的对象（即this指向新对象）；</li>\n<li>执行构造函数里面的代码；</li>\n<li>返回新的对象。<br>但是创建的person1和person2都有一个constructor(构造函数)属性，该属性指向CreatePerson,代码如下：<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.constructor == CreatePerson());<span class=\"comment\">//true</span></div><div class=\"line\">console.<span class=\"built_in\">log</span>(person2.constructor == CreatePerson());<span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>&emsp;&emsp;不过用instanceof操作符来检测对象的类型还是更可靠地，因为instanceof是用来专门比较一个对象是否为某个构造函数的实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); \t <span class=\"comment\">//true;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1 <span class=\"keyword\">instanceof</span> CreatePerson);<span class=\"comment\">//true;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(person2 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);      <span class=\"comment\">//true;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(person2 <span class=\"keyword\">instanceof</span> CreatePerson);<span class=\"comment\">//true;</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;创建自定义的构造函数意味着将来可以将他的实例标识为一种特定的类型，这就是构造函数比工厂模式强的地方，因为它只道自己从哪里来，通过谁产生的，在回顾上面（一）我所写的，你就会很明白了。</p>\n<h3 id=\"四-构造函数和普通函数的区别在哪？\"><a href=\"#四-构造函数和普通函数的区别在哪？\" class=\"headerlink\" title=\"四:构造函数和普通函数的区别在哪？**\"></a>四:构造函数和普通函数的区别在哪？**</h3><p>&emsp;&emsp;1.构造函数和普通函数唯一的区别是他们的调用方式不同。<br>&emsp;&emsp;2.任何函数只要通过new来调用，那它就可以作为构造函数，而任何函数，如果不通过new操作符来调用，他就是普通的函数。<br>&emsp;&emsp;例子如下：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//当做构造函数来使用</span></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">'bangbang'</span>,<span class=\"number\">18</span>,<span class=\"string\">'修身，齐家，天下很太平'</span>);</div><div class=\"line\">person1.should(); <span class=\"comment\">//'修身，齐家，天下很太平'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//构造函数当做普通函数使用</span></div><div class=\"line\">CreatePerson(<span class=\"string\">'bangbang'</span>,<span class=\"number\">18</span>,<span class=\"string\">'修身，齐家，天下很太平'</span>)</div><div class=\"line\"><span class=\"built_in\">window</span>.should();<span class=\"comment\">//'修身，齐家，天下很太平'</span></div><div class=\"line\"><span class=\"comment\">//在另一个对象的作用域中调用（这个需要以后的继承探讨）</span></div><div class=\"line\"><span class=\"keyword\">var</span>  person3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>():</div><div class=\"line\">CreatePerson.call(person3,<span class=\"string\">'qiqi'</span>,<span class=\"number\">18</span>,<span class=\"string\">'我是一个护士'</span>);<span class=\"comment\">//person3就有了CreatePerson类的所有的属性和should方法</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"五：构造函数有哪些不足之处？\"><a href=\"#五：构造函数有哪些不足之处？\" class=\"headerlink\" title=\"五：构造函数有哪些不足之处？**\"></a>五：构造函数有哪些不足之处？**</h3><p>&emsp;&emsp;1.构造函数最明显的缺点就是，每个方法都要在每个实例上重新创建一遍。在前面的例子中，person1和person2都有一个should的方法，但是两个方法不是同一个Function的实例，因此每定义一个函数(也就是实例化一个对象),从逻辑上构造函数还可以这样定义：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreatePerson</span>(<span class=\"params\">name,age,say</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.say = say;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.should = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'console.log(this.say)'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;由上面可以得出这种方式创建函数实例化出的对象都包含一个不同的Function实例，说的更通俗点：这种方式创建函数，会导致不同的作用域链和标识符解析，但是创建Function的新实例的机制仍然是相同的。所以，不同实例上的同名函数是不相等的，证明如下：<br><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.should == person2.should);<span class=\"comment\">//false</span></div></pre></td></tr></table></figure></p>\n<p>2.因此以上的写法可以这样简化：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreatePerson</span>(<span class=\"params\">name,age,say</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.say = say;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.should = should;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">should</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.say);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">'bangbang'</span>,<span class=\"number\">18</span>,<span class=\"string\">'乐观'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">'yanniu'</span>,<span class=\"number\">18</span>,<span class=\"string\">'切记盲目乐观'</span>);</div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;我们把函数放在构造函数的外面作为全局函数，因此person1和person2对象就共享了在全局作用域中定义的同一个say函数。但是问题又来了：<strong>在全局作用域中定义的函数实际上只能被某个对象调用，这让该全局作用域有点名不副实。</strong>，更让然无法接受的是：如果对象需要定义很多方法，那么就要定义很多个全局函数，那么我们这个自定义的引用类型就丝毫没有封装性可言了。因此我们需要另一种高大上的模式，——原型模式（prototype）。</p>\n","comments":true,"categories":[],"tags":[{"name":"javascript高级程序设计","slug":"javascript高级程序设计","permalink":"//www.iambangbang.club/tags/javascript高级程序设计/"}]},{"title":"深入理解prototyp","date":"2017-07-10T05:40:38.000Z","path":"2017/07/10/深入理解prototyp/","content":"<h2 id=\"对JavaScript中原型模式的理解\"><a href=\"#对JavaScript中原型模式的理解\" class=\"headerlink\" title=\"对JavaScript中原型模式的理解\"></a>对JavaScript中原型模式的理解</h2><h3 id=\"一：什么是原型对象？有什么优点？\"><a href=\"#一：什么是原型对象？有什么优点？\" class=\"headerlink\" title=\"一：什么是原型对象？有什么优点？**\"></a>一：什么是原型对象？有什么优点？**</h3><p>&emsp;&emsp; 简单的来说，无论何时，我们创建的每一个函数都有一个prototype属性，这个属性是一个指针，指向一个对象，这个对象包含了通过调用该构造函数所创建的对象共享的属性和方法。其实我们平常的叫法就是指：<strong>prototype就是通过该构造函数创建的某个实例的原型对象</strong>，但是其实prototype是每个构造函数的属性而已，只能说万物皆对象罢了。<br>&emsp;&emsp; 原型对象的优点是：所有的对象实例都可以共享它包含的属性和方法。这一点可以在构造函数里就可以看出来，因为构造函数在函数里面就定义了对象的实例信息，而原型对象可以在任何地方定义属性和方法。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">Person.prototype.name = <span class=\"string\">'bangbang'</span>;</div><div class=\"line\">Person.prototype.age = <span class=\"number\">18</span>;</div><div class=\"line\">Person.prototype.job = <span class=\"string\">'programmer'</span>;</div><div class=\"line\">Person.prototype.dream = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Change yourself'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">person1.dream();\t<span class=\"comment\">//Change yourself</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">person2.dream();</div><div class=\"line\"><span class=\"comment\">//判断两个实例继承的方法和属性是否全等</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.dream === person2.dream);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.age === person2.age);</div></pre></td></tr></table></figure></p>\n<p>由以上的代码可以看出它比构造函数方法的好处就是，person1和person2访问的都是同一个dream()函数，即他们的属性和方法都是共享的。<br><a id=\"more\"></a></p>\n<h3 id=\"二：深入理解原型对象和prototype？\"><a href=\"#二：深入理解原型对象和prototype？\" class=\"headerlink\" title=\"二：深入理解原型对象和prototype？**\"></a>二：深入理解原型对象和prototype？**</h3><p>&emsp;&emsp;由上面可知，我们创建了一个函数，就会根据ECMAscript特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个constructor(构造函数)属性，这个属性是一个指向prototype属性所在函数的指针。就像前面的例子，Person.prototype.constructor指向Person，而通过这个构造函数，我们还可以继续为原型对象添加其他属性和方法。<br>&emsp;&emsp;下面，我们就开始从原理上说明上面代码运行机制的：</p>\n<ol>\n<li>创建一个自定义的构造函数后，它的原型对象默认只会有constructor属性，其他属性和方法都是从Object继承而来的；</li>\n<li>当调用构造函数创建一个新实例后，该实例的内部将包含一个指针，指向构造函数的原型对象。ECMA5中称这个指针叫[[prototype]]。虽然在脚本中没有标准的方式访问[[prototype]]，但Firefox、Safari和Chrome在每个对象上都支持一个属性<em>proto</em>;而在其他浏览器中，这个属性则是完全不可见的。不过要明确的真正一点就是，这个连接存在于 <strong>实例</strong> 和 <strong>构造函数的原型对象</strong> 之间，而不是存在于实例和构造函数之间，用前面使用Person构造函数和Person.prototype创建实例的代码为例，各个对象之间的关系如下图所示：<br><img src=\"http://img.blog.csdn.net/20170514170752175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>&emsp;&emsp;上图展示了Person构造函数、Person的原型以及Person现有的两个实例之间的关系，再次，Person.prototype指向了原型对象，而Person.prototype.constructor又指回了Person。原型对象中除了包含constructor属性之外，还包括后来添加的其他属性。Person的每个实例——person1和person2都包含一个内部属性，该属性指向了Person.prototype；换句话说，他们与构造函数没有直接关系。<br>&emsp;&emsp;注意：虽然这两个实例都不包含属性和方法，但我们却可以调用name、age、job、dream()方法和属性，这是通过查找对象属性的过程来实现的。<br>&emsp;&emsp;虽然我们不能访问到[[prototype]]，但可以通过isPrototypeOf()方法来确定对象之间是否存在这种关系。因为这两个实例都有一个指向Person.prototype的指针，因此，都返回true如下所示：<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">console</span>.log(<span class=\"type\">Person</span>.proto<span class=\"keyword\">type</span>.isPrototypeOf(person1));//true</div><div class=\"line\"><span class=\"title\">console</span>.log(<span class=\"type\">Person</span>.proto<span class=\"keyword\">type</span>.isPrototypeOf(person2));//true</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>ECMA5增加了一个方法，叫Object.getPrototypeOf(),这个方法返回[[Prototype]]的值,也就是括号里面对象的原型，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(person1) == Person.prototype; <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(person1).name); <span class=\"comment\">//'bangbang'</span></div></pre></td></tr></table></figure></p>\n<p>用hasOwnProperty()方法可以检测一个属性是存在于实例中还是原型中。还是上面的例子：</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.hasOwnProperty(<span class=\"string\">'name'</span>); <span class=\"comment\">//false</span></div><div class=\"line\">person1.<span class=\"built_in\">name</span> = <span class=\"string\">'qiqi'</span>;</div><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.hasOwnProperty(<span class=\"string\">'name'</span>); <span class=\"comment\">//true —— 来自实例</span></div><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.<span class=\"built_in\">name</span>);  <span class=\"comment\">//'qiqi' ——来自实例</span></div><div class=\"line\">delete person1.<span class=\"built_in\">name</span>;</div><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.<span class=\"built_in\">name</span>); <span class=\"comment\">//'bangbang' —— 来自原型</span></div><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.hasOwnProperty(<span class=\"string\">'name'</span>); <span class=\"comment\">//true ——来自原型</span></div></pre></td></tr></table></figure>\n<p>当我们为person1添加name属性的时候，如下图图所示：<br><img src=\"http://img.blog.csdn.net/20170514170806065?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"三：组合使用构造函数模式和原型模式优点最多：\"><a href=\"#三：组合使用构造函数模式和原型模式优点最多：\" class=\"headerlink\" title=\"三：组合使用构造函数模式和原型模式优点最多：**\"></a>三：组合使用构造函数模式和原型模式优点最多：**</h3><p>&emsp;&emsp;以上我讲述了用构造函数生成对象的原理以及生成的对象和原型对象之间的关系，原理了解了这么多，我么当然需要知道怎么在合适的时候用他们。创建自定义类型的最常见方式就是组合使用构造函数模式和原型模式。构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。每个实例都会有自己的一份实例属性的副本，但同时又共享着对方发的引用，最大限度的节省了内存。如下例所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age,job</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.job = job;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.love = [<span class=\"string\">'qiqi'</span>,<span class=\"string\">'lili'</span>];</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">\t<span class=\"attr\">constructor</span> : Person,</div><div class=\"line\">\t<span class=\"attr\">dream</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.love[<span class=\"number\">0</span>]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'bangbang'</span>,<span class=\"number\">18</span>,<span class=\"string\">'programmer'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'xiaoya'</span>,<span class=\"number\">18</span>,<span class=\"string\">'teacher'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.love);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(person2.love)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.love === person2.love);  <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"comment\">//给person1的love属性添加元素</span></div><div class=\"line\">person1.love.push(<span class=\"string\">'niuniu'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.love)  <span class=\"comment\">//[\"qiqi\", \"lili\", \"niuniu\"]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(person2.love)  <span class=\"comment\">//[\"qiqi\", \"lili\"]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.love === person2.love);  <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.dream === person2.dream);<span class=\"comment\">//true</span></div></pre></td></tr></table></figure></p>\n<p>以上这种模式是ECMAscript中使用最广泛的，认同度最高的，优点最多的创建自定义类型的方法，也就是创建JavaScript中类的方法。</p>\n","comments":true,"categories":[],"tags":[{"name":"javascript高级程序设计","slug":"javascript高级程序设计","permalink":"//www.iambangbang.club/tags/javascript高级程序设计/"}]},{"title":"javascript继承方式——原型链","date":"2017-07-10T05:37:46.000Z","path":"2017/07/10/javascript继承方式——原型链/","content":"<pre><code>JavaScript中依靠原型链的继承方式\n</code></pre><hr>\n<h3 id=\"开门见山，ECMAScript中实现继承主要是靠原型链来实现的。\"><a href=\"#开门见山，ECMAScript中实现继承主要是靠原型链来实现的。\" class=\"headerlink\" title=\"开门见山，ECMAScript中实现继承主要是靠原型链来实现的。**\"></a>开门见山，ECMAScript中实现继承主要是靠原型链来实现的。**</h3><h3 id=\"一：什么是原型链呢？\"><a href=\"#一：什么是原型链呢？\" class=\"headerlink\" title=\"一：什么是原型链呢？**\"></a>一：什么是原型链呢？**</h3><p>&emsp;&emsp;其基本思想是利用原型，让一个引用类型继承另一个引用类型的属性和方法。根据上一节<a href=\"http://blog.csdn.net/flyingpig2016/article/details/53048394\" target=\"_blank\" rel=\"external\">原型对象</a>：我们知道，每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么如果我们让原型对象等于另一个类型的实例，结果会怎样呢？很显然，此时的原型对象将包含一个指向另一个原型的指针，相应的，另一个原型中也包含一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系层层递进，就<strong>构成了实例和原型的链条，这就是原型链</strong>。以下就是原型链形成的基本模式：<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//注意凡是this.-的，都是类的私有属性和方法，凡是-prototype.-的都是共有属性和方法</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Father类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.firstName = <span class=\"string\">'xue'</span>;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.fatherSay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Father.prototype.hobby = <span class=\"string\">'game'</span>;</div><div class=\"line\">Father.prototype.sayFirstName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//创建Son类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.lastName = <span class=\"string\">'bangbang'</span>;    </div><div class=\"line\">\t<span class=\"keyword\">this</span>.sonSay = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.lastName;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Son.prototype未被重写的时候，添加属性friend</span></div><div class=\"line\">Son.prototype.friend = <span class=\"string\">'qiqi'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Son.prototype)\t\t<span class=\"comment\">//Object &#123;friend: \"qiqi\", constructor: function&#125;</span></div><div class=\"line\"><span class=\"comment\">//Son.prototype未被重写的时候，实例化的对象son1</span></div><div class=\"line\"><span class=\"keyword\">var</span> son1 = <span class=\"keyword\">new</span> Son();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(son1.friend);\t\t<span class=\"comment\">//qiqi</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(son1));\t<span class=\"comment\">//Object &#123;friend: \"qiqi\", constructor: function&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//继承了father(),即重写了Son.prototype</span></div><div class=\"line\">Son.prototype = <span class=\"keyword\">new</span> Father();</div><div class=\"line\">Son.prototype.sayLastName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.lastName;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Son.prototype被重写后，实例化的对象son2</span></div><div class=\"line\"><span class=\"keyword\">var</span> son2 = <span class=\"keyword\">new</span> Son();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(son2));<span class=\"comment\">//Father &#123;firstName: \"xue\", fatherSay: function, sayLastName: function&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(son2.friend);\t\t   <span class=\"comment\">//undifined : Son.prototype被指向了，所以son2中没有friend\t</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(son2.sayLastName());\t\t   <span class=\"comment\">//bangbang : Son.prototype虽然被重指向了，但是sayLastName()是后来添加到prototype中的</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(son2.firstName);\t   <span class=\"comment\">//xue :证明了Son类继承了Father类的属性firstName</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(son2.fatherSay());\t   <span class=\"comment\">//xue :证明了Son类继承了Father类的方法fatherSay();</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(son2.sayFirstName());  <span class=\"comment\">//xue ：证明了Son类继承了Father类的方法sayFirstName();</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(son2.hobby);\t\t   <span class=\"comment\">//game:证明了Son类继承了Father类的属性hobby;</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;以上代码定义了两个类,Father()和Son(),每个类型分别有一个属性和一个方法，主要区别是Son()继承了Father(),继承是通过创建Father的实例，并把它赋值给Son.prototype实现的。实现的本质就是重写原型对象，换句话说，原来存在于Father()的实例中的所有属性和方法，现在也存在于Son()中了。在确立了继承关系之后，我们给Son.prototype添加了一个新的方法，这样就在继承了Father()的属性和方法的基础上又添加了一个新的方法sayLastName()和属性friend  。上面Object.getPrototypeOf()函数用来返回实例的[[prototype]],即返回对象的原型。继承原理如下图所示：<br><img src=\"http://img.blog.csdn.net/20170515181542781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>&emsp;&emsp;如上图所示，son1是Son.prototoype未被重新指向的时候实例化的对象，所以，它里面可访问的属性和方法有：friend,lastName,sonSay()；son2是Son.prototype已经被重新指向的时候实例化的对象，此时，Son类已经继承了Father类，所以，son2中可以访问的的属性和方法firstName，hobby，fatherSay()，sayFirstName(),最后我们在重指向Son.prototype后再给Son添加一个方法<code>Son.prototype.sayLastName = function(){return this.lastName;}</code>，然后son2也就具备了该方法。<br>&emsp;&emsp;我们开始总结原型搜索机制：当以读取模式访问一个实例属性时，首先会在实例中搜索该属性，如果没有找到该属性，就会继续搜索实例的原型。在通过原型链实现继承的情况下，搜索过程就得以沿着原型链继续向上。就拿上面的例子说，调用son2.sayFirstName()的时候，经过三个步骤：首先会搜索实例，然后搜索Son.prototype，最后一步才会找到父级原型中的sayFirstName()方法。</p>\n<h3 id=\"二：怎样确定原型和实例的关？\"><a href=\"#二：怎样确定原型和实例的关？\" class=\"headerlink\" title=\"二：怎样确定原型和实例的关？**\"></a>二：怎样确定原型和实例的关？**</h3><p>&emsp;&emsp;我们可以通过两种方式确定原型和实例之间的关系。<br>&emsp;&emsp;第一种方式是使用instanceof操作符，只要用这个操作符来测试实例与原型链中出现的构造函数，结果就会返回true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(son2 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);  <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(son2 <span class=\"keyword\">instanceof</span> Son);  <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(son1 <span class=\"keyword\">instanceof</span> Father);  <span class=\"comment\">//true</span></div></pre></td></tr></table></figure></p>\n<p>由于原型链的关系，我们可以说，son2是Object，Son，Father中任何一个类型的实例。<br>&emsp;&emsp;第二种方式是isPrototypeOf()方法，同样，只要是原型链中出现过的原型，都可以说是该原型链所派生的实例的类型。</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">console</span>.log(<span class=\"type\">Object</span>.proto<span class=\"keyword\">type</span>.isPrototypeof(son2); //true;</div><div class=\"line\"><span class=\"title\">console</span>.log(<span class=\"type\">Father</span>.proto<span class=\"keyword\">type</span>.isPrototypeof(son2); // true;</div><div class=\"line\"><span class=\"title\">console</span>.log(<span class=\"type\">Son</span>.proto<span class=\"keyword\">type</span>.isPrototypeof(son2);   //ture;</div></pre></td></tr></table></figure>\n<h3 id=\"三：原型链的问题？\"><a href=\"#三：原型链的问题？\" class=\"headerlink\" title=\"三：原型链的问题？**\"></a>三：原型链的问题？**</h3><p>&emsp;&emsp;第一个问题：我们知道，包含引用类型值的原型属性可以被有实例共享，在通过原型来实现继承的时候，原型实际会变成另一个类型的实例，于是原先的实例属性也就变成了现在的原型属性了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.colors = [<span class=\"string\">'red'</span>,<span class=\"string\">'blue'</span>,<span class=\"string\">'green'</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.names = <span class=\"string\">'bangbang'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//继承了Father();</span></div><div class=\"line\">Son.prototype = <span class=\"keyword\">new</span> Father();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> son1 = <span class=\"keyword\">new</span> Son();</div><div class=\"line\">son1.colors.push(<span class=\"string\">'black'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(son1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> son2 = <span class=\"keyword\">new</span> Son();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(son2.colors);</div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;当Son继承了Father之后，Son.prototype就变成了Father的一个实例，因此，它也拥有了一个它自己的colors属性，就跟创建了一个Son.prototype.colors属性一样。结果是Son的所有实例都会共享这一个colors属性，而我们对son1.colors的修改能够通过son2.colors反映出来。<br>原型链的第二个问题是：在创建子类型的实例时，不能向超类型的构造函数中传递参数。实际上，应该说是没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。实践中，很少使用原型链。</p>\n<h3 id=\"四：借用构造函数继承（即：用call-和apply-方法继承）\"><a href=\"#四：借用构造函数继承（即：用call-和apply-方法继承）\" class=\"headerlink\" title=\"四：借用构造函数继承（即：用call()和apply()方法继承）**\"></a>四：借用构造函数继承（即：用call()和apply()方法继承）**</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.firstName = <span class=\"string\">\"xue\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.color = [<span class=\"string\">\"white\"</span>,<span class=\"string\">\"black\"</span>];</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayFirstName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.firstName);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Father.prototype.hobby = <span class=\"string\">'phone'</span>;</div><div class=\"line\">Father.prototype.work = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'work'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//继承</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.lastName = <span class=\"string\">\"bangbang\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.lastName);</div><div class=\"line\">    &#125;</div><div class=\"line\">    Father.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Son.prototype);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> son1 = <span class=\"keyword\">new</span> Son();</div><div class=\"line\">son1.color.push(<span class=\"string\">'black'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(son1.color);  <span class=\"comment\">//[\"white\", \"black\", \"black\"]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(son1.hobby)   <span class=\"comment\">//undefiind//证明call不能继承Father的prototype中的属性</span></div></pre></td></tr></table></figure>\n<p>但是，这种借用构造函数的继承方式存在问题——方法都在构造函数中定义，因此函数复用就无从谈起了。而且，在超类型的原型(如：Father.prototype)中定义的方法，对子类型而言是不可见的，结果所有类型都只能使用构造函数模式。<br><strong>五：组合式继承（最常用的继承模式）</strong><br>&emsp;&emsp;指的是将<strong>原型链</strong>和<strong>借用构造函数</strong>的技术组合到一块。它们背后的思想是使用原型实现对<strong>原型属性和方法</strong>的继承，而通过借用构造函数来实现对<strong>实例属性</strong>的继承。这样，既通过在原型上定义方法实现了函数复用，又能保证每个实例都有它自己的属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建父类</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\">firstName</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.firstName = firstName;</div><div class=\"line\">    <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>,<span class=\"string\">'blue'</span>,<span class=\"string\">'green'</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//创建子类</span></div><div class=\"line\">Father.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.firstName);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\">firstName,age</span>)</span>&#123;</div><div class=\"line\"><span class=\"comment\">// 继承实例属性</span></div><div class=\"line\">    Father.call(<span class=\"keyword\">this</span>,firstName);</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//继承原型属性和方法</span></div><div class=\"line\">Son.prototype = <span class=\"keyword\">new</span> Father();</div><div class=\"line\">Son.prototype.constructor = Father;</div><div class=\"line\">Son.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> son1 = <span class=\"keyword\">new</span> Son(<span class=\"string\">\"bangbang\"</span>,<span class=\"number\">18</span>);</div><div class=\"line\">son1.colors.push(<span class=\"string\">'black'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(son1.colors);   <span class=\"comment\">//[\"red\", \"blue\", \"green\", \"black\"]</span></div><div class=\"line\">son1.sayName(); <span class=\"comment\">//bangbang</span></div><div class=\"line\">son1.sayAge();  <span class=\"comment\">//18</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> son2 = <span class=\"keyword\">new</span> Son(<span class=\"string\">'qiqi'</span>,<span class=\"number\">17</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(son2.colors);   <span class=\"comment\">//[\"red\", \"blue\", \"green\"]</span></div><div class=\"line\">son2.sayName();             <span class=\"comment\">//qiqi</span></div><div class=\"line\">son2.sayAge();              <span class=\"comment\">//17</span></div></pre></td></tr></table></figure></p>\n","comments":true,"categories":[],"tags":[{"name":"javascript高级程序设计","slug":"javascript高级程序设计","permalink":"//www.iambangbang.club/tags/javascript高级程序设计/"}]},{"title":"详解callee和caller,apply()和call的用法","date":"2017-07-10T05:31:05.000Z","path":"2017/07/10/详解callee和caller-apply-和call的用法/","content":"<h3 id=\"一：函数内部的对象：arguments和this\"><a href=\"#一：函数内部的对象：arguments和this\" class=\"headerlink\" title=\"一：函数内部的对象：arguments和this**\"></a>一：函数内部的对象：arguments和this**</h3><p>&emsp;&emsp;我们都知道js中arguments对象主要是保存函数的参数(如果不知道arguments，在有参数的函数中输出一下就知道了)，但是这个对象还有一个属性为callee，它是一个指针，指向拥有这个arguments对象的函数。例如阶乘函数：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function <span class=\"built_in\">factorial</span>(<span class=\"built_in\">num</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">num</span> &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">return</span> <span class=\"built_in\">num</span> * <span class=\"built_in\">factorial</span>(<span class=\"built_in\">num</span>-<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"built_in\">factorial</span>(<span class=\"number\">5</span>));//<span class=\"number\">120</span></div></pre></td></tr></table></figure></p>\n<p>由于函数的执行和函数名factorial紧紧耦合在了一起，为了消除这种紧密耦合的现象，可以使用arguments.callee:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial2</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num * <span class=\"built_in\">arguments</span>.callee(num<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(factorial2(<span class=\"number\">5</span>)); <span class=\"comment\">//120</span></div></pre></td></tr></table></figure></p>\n<p>两者的区别如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> trueFactorial = factorial2;</div><div class=\"line\">factorial = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(trueFactorial(<span class=\"number\">6</span>)); <span class=\"comment\">//720</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(factorial(<span class=\"number\">6</span>));      <span class=\"comment\">//0</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;上面的trueFactorial实际上是在另一个位置上保存了一个函数的指针。然后又将一个简单的函数赋值给factorial变量。如果不用arguments.callee，那么，调用trueFactorial(6)的时候就返回0.但是上面的例子解除了代码和函数的耦合状态，因此trueFactorial仍然可以正常的计算阶乘。<br><a id=\"more\"></a></p>\n<h3 id=\"二：this的意义？\"><a href=\"#二：this的意义？\" class=\"headerlink\" title=\"二：this的意义？**\"></a>二：this的意义？**</h3><p>&emsp;&emsp;this引用的是函数执行的环境对象（当我们在网页的全局作用域中调用函数的时候，this对象就是window对象）。也就是说，<strong>在全局作用域中的所有变量和函数都是window对象的属性和方法</strong>，例如：<br><figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">color</span> = <span class=\"string\">'green'</span>;  <span class=\"comment\">//相当于window.color = 'green'</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attribute\">color</span>:<span class=\"string\">\"blue\"</span>&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saycolor</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.color);</div><div class=\"line\">&#125;</div><div class=\"line\">saycolor();         <span class=\"comment\">//green，这里的this代表window</span></div><div class=\"line\"><span class=\"built_in\">window</span>.saycolor()   <span class=\"comment\">//green</span></div><div class=\"line\">obj1.saycolor = saycolor;</div><div class=\"line\">obj1.saycolor();    <span class=\"comment\">//blue</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"三：caller属性是什么？\"><a href=\"#三：caller属性是什么？\" class=\"headerlink\" title=\"三：caller属性是什么？**\"></a>三：caller属性是什么？**</h3><p>&emsp;&emsp;caller属性保存着调用当前函数的函数的引用。如果是在全局作用域中调用当前的函数，它的值就是null。例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a.caller); <span class=\"comment\">//返回正在调用俺的函数</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    a();</div><div class=\"line\">&#125;</div><div class=\"line\">a();    <span class=\"comment\">//null</span></div><div class=\"line\">b();    <span class=\"comment\">//function b()&#123;a();&#125;</span></div></pre></td></tr></table></figure></p>\n<p>但是为了实现更松散的耦合，也可以通过arguments.callee.caller来达到相同的目的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.callee.caller); <span class=\"comment\">//返回正在调用俺的函数b</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    a();</div><div class=\"line\">&#125;</div><div class=\"line\">a();    <span class=\"comment\">//null</span></div><div class=\"line\">b();    <span class=\"comment\">//function b()&#123;a();&#125;</span></div></pre></td></tr></table></figure></p>\n<p>不过arguments.callee在严格模式下会导致错误。</p>\n<h3 id=\"四：call-和apply-的应用\"><a href=\"#四：call-和apply-的应用\" class=\"headerlink\" title=\"四：call()和apply()的应用**\"></a>四：call()和apply()的应用**</h3><p>&emsp;&emsp;每个函数都包含两个属性：length和prototype。其中length表示函数希望接受地参数的个数，例如：<br><figure class=\"highlight scilab\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span><span class=\"params\">()</span>&#123;</span></div><div class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"number\">000</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span><span class=\"params\">(arg1)</span>&#123;</span></div><div class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"number\">111</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span><span class=\"params\">(arg1,arg2)</span>&#123;</span></div><div class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"number\">222</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">console.<span class=\"built_in\">log</span>(a.<span class=\"built_in\">length</span>); <span class=\"comment\">//0</span></div><div class=\"line\">console.<span class=\"built_in\">log</span>(b.<span class=\"built_in\">length</span>); <span class=\"comment\">//1</span></div><div class=\"line\">console.<span class=\"built_in\">log</span>(c.<span class=\"built_in\">length</span>); <span class=\"comment\">//2</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;prototype属性是非常重要的，它指向一个对象，包含了所有它生成实例下的所有属性和方法，再次不再赘述，我的prototype博文中另有详细讲解。<br>每个函数都包含两个非继承而来的方法：apply()和call()。这两个方法的用途都是在特定的作用域中调用函数，其实就是所在函数体内this对象的值。<br>1.apply()接受两个参数：一个是在其中运行函数的作用域，另一个是参数数组。其中：第二个参数可以是array的实例，也可以是arguments对象。实例如下：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function <span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">(arg1,arg2)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> arg1 + arg2;</div><div class=\"line\">&#125;</div><div class=\"line\">function callfun1(arg1,arg2)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">fun</span>.<span class=\"title\">apply</span><span class=\"params\">(this,arguments)</span></span>; <span class=\"comment\">//传入arguments对象</span></div><div class=\"line\">&#125;</div><div class=\"line\">function callfun2(arg1,arg2)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">fun</span>.<span class=\"title\">apply</span><span class=\"params\">(this,[arg1,arg2])</span></span><span class=\"comment\">//传入参数数组</span></div><div class=\"line\">&#125;</div><div class=\"line\">console.log(callfun1(<span class=\"number\">3</span>,<span class=\"number\">7</span>)); <span class=\"comment\">//10</span></div><div class=\"line\">console.log(callfun2(<span class=\"number\">3</span>,<span class=\"number\">2</span>)); <span class=\"comment\">//5</span></div></pre></td></tr></table></figure></p>\n<p>2.call()方法和apply()方法的作用相同，曲别在于接收参数的方式不同。用call方法传递参数的时候必须直接传递，也就是传递给函数的参数必须一一列举出来，例子如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function <span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">(arg1,arg2)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> arg1 + arg2;</div><div class=\"line\">&#125;</div><div class=\"line\">function callfun3(arg1,arg2)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">fun</span>.<span class=\"title\">call</span><span class=\"params\">(this,arg1,arg2)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(callfun3(<span class=\"number\">2</span>,<span class=\"number\">6</span>)); <span class=\"comment\">//8</span></div></pre></td></tr></table></figure>\n<p>但是传递参数并非apply()和call()用的最多的地方，他们真正强大的地方时能够扩充函数赖以运行的作用域。例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">18</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;<span class=\"attr\">age</span>:<span class=\"number\">17</span>&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</div><div class=\"line\">&#125;</div><div class=\"line\">say();</div><div class=\"line\">say.call(<span class=\"keyword\">this</span>);  <span class=\"comment\">//18</span></div><div class=\"line\">say.call(<span class=\"built_in\">window</span>) <span class=\"comment\">//18</span></div><div class=\"line\">say.call(person) <span class=\"comment\">//17，此时运行的作用域为person，相当于把person的作用域传给了say函数里面</span></div></pre></td></tr></table></figure></p>\n<p>3.bind()用法。bind()方法会创建一个函数的实例，其this值会被绑定到传给bind()函数的值。例如：</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var age = <span class=\"number\">18</span>;</div><div class=\"line\">var person = &#123;age:<span class=\"number\">17</span>&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span></span> say()&#123;</div><div class=\"line\">    console.<span class=\"built_in\">log</span>(this.age);</div><div class=\"line\">&#125;</div><div class=\"line\">var psay = say.<span class=\"keyword\">bind</span>(person);</div><div class=\"line\">console.<span class=\"built_in\">log</span>(psay) //<span class=\"function\"><span class=\"keyword\">function</span></span> say()&#123;console.<span class=\"built_in\">log</span>(this.age);&#125;</div><div class=\"line\">psay();     //<span class=\"number\">17</span>，相当于把person作用域传给了say()构造函数里面，它和apply和<span class=\"keyword\">call</span>的区别就是，<span class=\"keyword\">bind</span>必须还要创建一个函数实例，也就是<span class=\"keyword\">bind</span>不能直接执行传参后的函数。</div></pre></td></tr></table></figure>\n<p>上面代码中person对象的作用域传到了bind()新创建的psay()函数执行环境里面，所以执行完输出this.age=17.</p>\n","comments":true,"categories":[],"tags":[{"name":"javascript高级程序设计","slug":"javascript高级程序设计","permalink":"//www.iambangbang.club/tags/javascript高级程序设计/"}]},{"title":"gulp的实时刷新、代码压缩、代码排错","date":"2017-07-10T04:33:00.000Z","path":"2017/07/10/gulp的实时刷新、代码压缩、代码排错/","content":"<h2 id=\"gulp的学习\"><a href=\"#gulp的学习\" class=\"headerlink\" title=\"gulp的学习\"></a>gulp的学习</h2><h3 id=\"一：什么是gulp？\"><a href=\"#一：什么是gulp？\" class=\"headerlink\" title=\"一：什么是gulp？\"></a>一：什么是gulp？</h3><p>&emsp;&emsp;简而言之，gulp是一种工具，是一种前端工具，是一种在前端开发过程中对代码进行构建的工具。<br>作用：对网站资源优化，比之前流行的工具grunt构建项目过程重复率低，可以愉快的编写代码。<br>具体作用：网页自动刷新、CSS预处理、代码检测、压缩图片、等等…… 只需用简单的命令就能全部完成，让你把重点放在功能开发上；同时减少人为失误，提高开发效率和项目质量，让专注更为专注。<br><a id=\"more\"></a></p>\n<h3 id=\"二：为什么使用Gulp而不使用Grunt\"><a href=\"#二：为什么使用Gulp而不使用Grunt\" class=\"headerlink\" title=\"二：为什么使用Gulp而不使用Grunt?\"></a>二：为什么使用Gulp而不使用Grunt?</h3><ul>\n<li>简洁：Gulp侧重“代码优于配置”(code over configuration)。最直观的感受，更为简单和清晰，不需要像Grunt一样写一堆庞大的配置文件。</li>\n<li>高效：Gulp基于Node Streams（流）来构建任务，避免磁盘反复I/O（读取/写入）。每个任务都是单独执行（坚持做一件事并且做好它），这使得它速度更快、更为纯粹。</li>\n<li>易学：Gulp核心API只有4个。简洁的API易于上手，学习过程比较平滑。<h3 id=\"三：gulp核心API用法？\"><a href=\"#三：gulp核心API用法？\" class=\"headerlink\" title=\"三：gulp核心API用法？\"></a>三：gulp核心API用法？</h3></li>\n<li>gulp.src(globs[, options])：指明源文件路径<br>  globs：路径模式匹配；<br>  options：可选参数；  </li>\n<li>gulp.dest(path[, options])：指明处理后的文件输出路径<br>  path：路径（一个任务可以有多个输出路径）；<br>  options：可选参数；</li>\n<li>gulp.task(name[, deps], fn)：注册任务<br>  name：任务名称（通过 gulp name 来执行这个任务）；<br>  deps：可选的数组，在本任务运行中所需要所依赖的其他任务（当前任务在依赖任务执行完毕后才会执行）；<br>  fn：任务函数（function方法）；</li>\n<li>gulp.watch(glob [, opts], tasks)：监视文件的变化并运行相应的任务<br>  glob：路径模式匹配；<br>  opts：可以选配置对象；<br>  taks：执行的任务；<br><strong>注</strong>：1.1 streams（流）的简述：Node.js中的I/O操作是异步的，因此磁盘的读写和网络操作都需要传递回调函数。streams的优点：不需要把文件都一次性写入内存，通过pie（管道）把文件转为数据流（将任务和操作连接起来），像瀑布一样一级级（one by one）往下流（处理），因此只需一次I/O操作。而Grunt是每执行一个任务就需要I/O一次，在任务多的时候，就会有大量I/O操作，效率自然就会比较低。<br>1.2. 以前Gulp有5个核心API，但随着Gulp 3.5的更新，gulp.run()方法早已被弃用。<h3 id=\"四：gulp安装配置？\"><a href=\"#四：gulp安装配置？\" class=\"headerlink\" title=\"四：gulp安装配置？\"></a>四：gulp安装配置？</h3>&emsp;&emsp;gulp的安装很简单，在这我就不一一讲解，只看代码：<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//全局安装</span></div><div class=\"line\">npm install -g gulp</div><div class=\"line\"><span class=\"comment\">//本地安装，项目开发一般就是本地安装</span></div><div class=\"line\">npm install gulp --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>注：</strong><br>1.–save：将保存配置信息至package.json（此文件在 node_modules\\gulp 目录下）<br>2.-dev：将它作为你的项目依赖添加到中devDependencies内（–save和-dev是2个东西，记得分清前面的”-“号）<br>3.由于Gulp会自带package.json文件（用于存储项目的元数据），所以这里只做简单介绍（如果你想自己创建，也可通过命令 npm init，然后根据引导填写相关信息）：<br>我们在某个文件夹下面初始化一个目录：<br><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">npm</span> init</div></pre></td></tr></table></figure></p>\n<p>然后会创建一个项目，然后该文件夹羡慕就出现一个package.json文件，记录了该项目的所有信息：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//目前是初始化，信息比较少</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"02gulp\"</span>,<span class=\"comment\">//模块名称：只能包含小写字母数字和中划线，如果为空则使用项目文件夹名称代替（必填）</span></div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,<span class=\"comment\">//版本号（必填）</span></div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>, <span class=\"comment\">//描述：会在npm搜索列表中显示</span></div><div class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"</span><span class=\"keyword\">Error</span>: <span class=\"keyword\">no</span> <span class=\"keyword\">test</span> specified\\<span class=\"string\">\" &amp;&amp; exit 1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后我们在该目录下安装gulp，安装完gulp后我们安装插件：<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install gulp --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\"><span class=\"comment\">//例如我们通过gulp-livereload 和 gulp-webserver插件，来实现页面自动刷新，如需要安装其他插件，需要按照此方法安装</span></div><div class=\"line\">npm instal gulp-livereload  --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div><div class=\"line\">npm instal gulp-webserver  --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"五：Gulp任务配置（Task-Configuration）？\"><a href=\"#五：Gulp任务配置（Task-Configuration）？\" class=\"headerlink\" title=\"五：Gulp任务配置（Task Configuration）？\"></a>五：Gulp任务配置（Task Configuration）？</h3><p>5.1.在项目根目录中，创建gulpfile.js文件，用来配置和定义任务（task）。我们在根目录下创建一个src文件夹，src文件夹下面有js和sass等文件夹，下面的例子都是这样的目录，我们处理代码后生成的目录bulid可以先不用创建，因为会自动生成。<br>5.2.在gulpgile.js文件中填写<strong>实时刷新</strong>的相关配置：<br><strong>方法一：</strong>用gulp-webserver模块，该模块启动服务器的时候直接打开页面；<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);   <span class=\"comment\">//基础库</span></div><div class=\"line\"><span class=\"comment\">//引入gulp插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-livereload'</span>); <span class=\"comment\">//网页自动刷新 （服务器控制客户端同步刷新）</span></div><div class=\"line\">\twebserver = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-webserver'</span>);   <span class=\"comment\">// 本地服务器</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注册服务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'webserver'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'./'</span>)  \t\t\t<span class=\"comment\">//服务器目录(./代表根目录)</span></div><div class=\"line\">\t.pipe(webserver(&#123;  \t\t\t<span class=\"comment\">//运行gulp-webserver</span></div><div class=\"line\">\t\tlivereload:<span class=\"literal\">true</span>,    \t<span class=\"comment\">//启用livereload</span></div><div class=\"line\">\t\topen : <span class=\"literal\">true</span>\t\t\t\t<span class=\"comment\">//服务器启动时自动打开网页</span></div><div class=\"line\">\t&#125;))</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//定义html任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'html'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'src/*.html'</span>)</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 监听任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'*.html'</span>,[<span class=\"string\">'html'</span>])    <span class=\"comment\">//监听根目录下所有.html文件</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//默认任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'webserver'</span>,<span class=\"string\">'watch'</span>,<span class=\"string\">'html'</span>]);</div></pre></td></tr></table></figure></p>\n<p>当然，在执行过程中我们需要在根目录下创建一个html文件，然后执行<code>gulp</code>，然后相当于执行了<code>gulpfile.js</code>中的默认任务，如果我们需要实时刷新，我们就需要执行特定任务：<code>gulp webserver</code>,然后我们修改html文件，在浏览器中就可以实时看到效果了。<br><strong>方法二：</strong>第二种自动刷新的方法是安装gulp-connect模块，同样是上面的目录：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</div><div class=\"line\">\tuglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</div><div class=\"line\">\tconcat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>),</div><div class=\"line\">\trename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>),</div><div class=\"line\">\tconnect = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-connect'</span>);</div><div class=\"line\"><span class=\"comment\">//定义名为js的任务，该方法可以压缩、重命名和合并js代码，下文会讲明白的</span></div><div class=\"line\">gulp.task(<span class=\"string\">'js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'./src/js/*.js'</span>)</div><div class=\"line\">\t\t.pipe(concat(<span class=\"string\">'main.js'</span>))</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid/js'</span>))</div><div class=\"line\">\t\t.pipe(rename(&#123;<span class=\"attr\">suffix</span>:<span class=\"string\">'.min'</span>&#125;))</div><div class=\"line\">\t\t.pipe(uglify())</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid/js'</span>))</div><div class=\"line\">\t\t.pipe(connect.reload())</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//定义html任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'html'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'./src/*.html'</span>)</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'./bulid'</span>))</div><div class=\"line\">\t\t.pipe(connect.reload());</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//定义livereload任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'connect'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tconnect.server(&#123;</div><div class=\"line\">\t\t<span class=\"attr\">livereload</span> : <span class=\"literal\">true</span></div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//定义监听任务watch</span></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'src/*.html'</span>,[<span class=\"string\">'html'</span>]);</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'src/js/*.js'</span>,[<span class=\"string\">'js'</span>]);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义默认任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'js'</span>,<span class=\"string\">'html'</span>,<span class=\"string\">'watch'</span>,<span class=\"string\">'connect'</span>]);</div></pre></td></tr></table></figure></p>\n<p>5.3.<strong>实时刷新并且压缩js代码</strong>的相关配置<br>&emsp;&emsp;下面的方法是用gulp-webserver模块，服务器启动时自动打开网页<br>当然我们需要提前配置好<code>gulp-concat</code>和<code>gulp-rename</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);   <span class=\"comment\">//基础库</span></div><div class=\"line\"><span class=\"comment\">//引入gulp插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-livereload'</span>), <span class=\"comment\">//网页自动刷新 （服务器控制客户端同步刷新）</span></div><div class=\"line\">\twebserver = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-webserver'</span>),   <span class=\"comment\">// 本地服务器</span></div><div class=\"line\">\tuglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</div><div class=\"line\"><span class=\"comment\">//注册实时刷新服务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'webserver'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'src'</span>)  \t\t\t<span class=\"comment\">//服务器目录(./代表根目录)</span></div><div class=\"line\">\t.pipe(webserver(&#123;  \t\t\t<span class=\"comment\">//运行gulp-webserver</span></div><div class=\"line\">\t\tlivereload:<span class=\"literal\">true</span>,    \t<span class=\"comment\">//启用livereload</span></div><div class=\"line\">\t\topen : <span class=\"literal\">true</span>\t\t\t\t<span class=\"comment\">//服务器启动时自动打开网页</span></div><div class=\"line\">\t&#125;)) </div><div class=\"line\">&#125;) </div><div class=\"line\"><span class=\"comment\">//压缩JavaScript文件</span></div><div class=\"line\">gulp.task(<span class=\"string\">'minify'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'./src/js/*.js'</span>)</div><div class=\"line\">\t\t.pipe(uglify())</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid/js'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//定义html任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'html'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'src/*.html'</span>)</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 监听任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'*.html'</span>,[<span class=\"string\">'html'</span>])    <span class=\"comment\">//监听src目录下所有.html文件</span></div><div class=\"line\">\tgulp.watch(<span class=\"string\">'src/js/*.js'</span>,[<span class=\"string\">'minify'</span>]);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//默认任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>,[<span class=\"string\">'html'</span>,<span class=\"string\">'minify'</span>,<span class=\"string\">'webserver'</span>,<span class=\"string\">'watch'</span>]);</div></pre></td></tr></table></figure></p>\n<p>5.3.<strong>实时刷新html、压缩、排错、合并js代码</strong>的相关配置<br>&emsp;&emsp;排错我们当然需要用到gulp-jshint这个著名的插件了，合并代码我们需要用到gulp-concat来合并好多的js到一个js下面，这样可以减少js的请求次数，有利于用户体验。自己安装吧！，配置如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>); <span class=\"comment\">//基础库</span></div><div class=\"line\"><span class=\"comment\">//引入gulp插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-livereload'</span>), <span class=\"comment\">//网页自动刷新 （服务器控制客户端同步刷新）</span></div><div class=\"line\">\twebserver = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-webserver'</span>), <span class=\"comment\">// 本地服务器</span></div><div class=\"line\">\tuglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</div><div class=\"line\">\tconcat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>),</div><div class=\"line\">\trename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>),</div><div class=\"line\">\tjshint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-jshint'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注册实时刷新服务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'webserver'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'bulid'</span>) <span class=\"comment\">//服务器目录(./代表根目录)</span></div><div class=\"line\">\t\t.pipe(webserver(&#123; <span class=\"comment\">//运行gulp-webserver</span></div><div class=\"line\">\t\t\tlivereload: <span class=\"literal\">true</span>, <span class=\"comment\">//启用livereload</span></div><div class=\"line\">\t\t\topen: <span class=\"literal\">true</span> <span class=\"comment\">//服务器启动时自动打开网页</span></div><div class=\"line\">\t\t&#125;))</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//定义js任务，排错、压缩、合并、</span></div><div class=\"line\">gulp.task(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.src([<span class=\"string\">'src/js/**/*.js'</span>, <span class=\"string\">'src/!js/**/*.min.js'</span>]) <span class=\"comment\">//匹配目录下所有的JavaScript文件，然后排除后缀为.min.js的文件</span></div><div class=\"line\">\t\t.pipe(jshint())</div><div class=\"line\">\t\t.pipe(jshint.reporter(<span class=\"string\">'default'</span>))</div><div class=\"line\"><span class=\"comment\">//\t\t.pipe(rename(&#123;suffix: '.min'&#125;))</span></div><div class=\"line\">\t\t.pipe(uglify())</div><div class=\"line\">\t\t.pipe(concat(<span class=\"string\">'main.js'</span>))</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid/js'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//定义html任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'src/*.html'</span>)</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 监听任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'src/*.html'</span>, [<span class=\"string\">'html'</span>]) <span class=\"comment\">//监听src目录下所有.html文件</span></div><div class=\"line\">\tgulp.watch(<span class=\"string\">'src/js/*.js'</span>, [<span class=\"string\">'js'</span>]);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//默认任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'html'</span>, <span class=\"string\">'js'</span>, <span class=\"string\">'webserver'</span>, <span class=\"string\">'watch'</span>]);</div></pre></td></tr></table></figure></p>\n<p>5.4.<strong>处理less</strong>的相关配置<br>&emsp;&emsp;加上上面的配置，我们引入处理less的代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>); <span class=\"comment\">//基础库</span></div><div class=\"line\"><span class=\"comment\">//引入gulp插件</span></div><div class=\"line\"><span class=\"keyword\">var</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-livereload'</span>), <span class=\"comment\">//网页自动刷新 （服务器控制客户端同步刷新）</span></div><div class=\"line\">\twebserver = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-webserver'</span>), <span class=\"comment\">// 本地服务器</span></div><div class=\"line\">\tuglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</div><div class=\"line\">\tconcat = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-concat'</span>),</div><div class=\"line\">\trename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>),</div><div class=\"line\">\tjshint = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-jshint'</span>),</div><div class=\"line\"></div><div class=\"line\">\tless = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-less'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注册实时刷新服务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'webserver'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'bulid'</span>) <span class=\"comment\">//服务器目录(./代表根目录)</span></div><div class=\"line\">\t\t.pipe(webserver(&#123; <span class=\"comment\">//运行gulp-webserver</span></div><div class=\"line\">\t\t\tlivereload: <span class=\"literal\">true</span>, <span class=\"comment\">//启用livereload</span></div><div class=\"line\">\t\t\topen: <span class=\"literal\">true</span> <span class=\"comment\">//服务器启动时自动打开网页</span></div><div class=\"line\">\t\t&#125;))</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//定义js任务，排错、压缩、合并、</span></div><div class=\"line\">gulp.task(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.src([<span class=\"string\">'src/js/**/*.js'</span>, <span class=\"string\">'src/!js/**/*.min.js'</span>]) <span class=\"comment\">//匹配目录下所有的JavaScript文件，然后排除后缀为.min.js的文件</span></div><div class=\"line\">\t\t.pipe(jshint())</div><div class=\"line\">\t\t.pipe(jshint.reporter(<span class=\"string\">'default'</span>))</div><div class=\"line\"><span class=\"comment\">//\t\t.pipe(rename(&#123;suffix: '.min'&#125;))</span></div><div class=\"line\">\t\t.pipe(uglify())</div><div class=\"line\">\t\t.pipe(concat(<span class=\"string\">'main.js'</span>))</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid/js'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//定义html任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'src/*.html'</span>)</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid'</span>))</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//定义less任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'less'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tgulp.src(<span class=\"string\">'src/less/*.less'</span>)</div><div class=\"line\">\t\t.pipe(less())</div><div class=\"line\">\t\t.pipe(gulp.dest(<span class=\"string\">'bulid/css'</span>))</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 监听任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'watch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;   </div><div class=\"line\">\twatcher = gulp.watch(<span class=\"string\">'src/*.html'</span>, [<span class=\"string\">'html'</span>]) <span class=\"comment\">//监听src目录下所有.html文件</span></div><div class=\"line\"><span class=\"comment\">//\tvar watcher = gulp.watch('src/*.html', ['html'])</span></div><div class=\"line\"><span class=\"comment\">//\twatcher.on('change',function(event)&#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\tconsole.log('Event type' + event.type);</span></div><div class=\"line\"><span class=\"comment\">//\t\tconsole.log('Event path:' + event.path);</span></div><div class=\"line\"><span class=\"comment\">//\t&#125;)</span></div><div class=\"line\">\tgulp.watch(<span class=\"string\">'src/js/*.js'</span>, [<span class=\"string\">'js'</span>]);</div><div class=\"line\">\tgulp.watch(<span class=\"string\">'src/less/*.less'</span>, [<span class=\"string\">'less'</span>]);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//默认任务</span></div><div class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [<span class=\"string\">'html'</span>, <span class=\"string\">'less'</span>,<span class=\"string\">'js'</span>, <span class=\"string\">'webserver'</span>, <span class=\"string\">'watch'</span>]);</div></pre></td></tr></table></figure></p>\n<h3 id=\"六：Gulp中不刷新加载页面模块-BroserSync的使用？\"><a href=\"#六：Gulp中不刷新加载页面模块-BroserSync的使用？\" class=\"headerlink\" title=\"六：Gulp中不刷新加载页面模块-BroserSync的使用？\"></a>六：Gulp中不刷新加载页面模块-BroserSync的使用？</h3><p>&emsp;&emsp;BroserSync也是gulp的一个子组件，为什么我要单独讲解呢，因为BroserSync在浏览器中展示变化的功能与LiveReload非常相似，但是它有更多的功能。当你改变代码的时候，BrowserSync会重新加载页面，或者如果是css文件，会直接添加进css中，页面并不需要再次刷新。这项功能在网站是禁止刷新的时候是很有用的。假设你正在开发单页应用的第4页，刷新页面就会导致你回到开始页。使用LiveReload的话，你就需要在每次改变代码之后还需要点击四次，而当你修改CSS时，插入一些变化时，BrowserSync会直接将需要修改的地方添加进CSS，就不用再点击回退。<br>    &emsp;&emsp;BrowserSync不需要使用浏览器插件，因为它本身就可以为你提供文件服务（如果文件是动态的，则为他们提供代理服务）和用来开启浏览器和服务器之间的socket的脚本服务。到目前为止这个功能的使用都十分顺畅。安装方法：<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> browser-sync</div></pre></td></tr></table></figure></p>\n<p>使用方法：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义browser-sync任务</span></div><div class=\"line\">gulp.task(<span class=\"symbol\">'browser</span>-sync',function()&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> files = [</div><div class=\"line\">\t\t<span class=\"symbol\">'src</span><span class=\"comment\">/**/</span>*.html',</div><div class=\"line\">    \t<span class=\"symbol\">'src</span>/css<span class=\"comment\">/**/</span>*.css',</div><div class=\"line\">    \t<span class=\"symbol\">'src</span>/less<span class=\"comment\">/**/</span>*.less',</div><div class=\"line\">    \t<span class=\"symbol\">'src</span>/imgs<span class=\"comment\">/**/</span>*.png',</div><div class=\"line\">    \t<span class=\"symbol\">'src</span>/js<span class=\"comment\">/**/</span>*.js',</div><div class=\"line\">\t];</div><div class=\"line\">\tbrowserSync.init(files,&#123;</div><div class=\"line\">\t\tserver:&#123;</div><div class=\"line\">\t\t\tbaseDir : <span class=\"symbol\">'sr</span>c'</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>执行方法，执行后后会监听匹配文件的变化而且不用刷新(当然我们之前的那么多配置并不是没用，因为开发需要刷新啊)，同时为src目录提供文件服务。<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp browser-<span class=\"keyword\">sync</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"七：总结gulp的配置\"><a href=\"#七：总结gulp的配置\" class=\"headerlink\" title=\"七：总结gulp的配置\"></a>七：总结gulp的配置</h3><p>&emsp;&emsp;说了这么多，我们应该清楚，gulp无非和其他node模块一样，先用<code>require()</code>引入模块，然后用<code>gulp.task()</code>建立任务，然后添加到监听任务<code>gulp.task(&#39;watch&#39;,function(){}</code>中，最后把这些任务名添加到默认任务<code>gulp.task(&#39;default&#39;, [&#39;html&#39;, &#39;less&#39;,&#39;js&#39;, &#39;webserver&#39;, &#39;watch&#39;]);</code>中为了执行方便，直接一个<code>gulp</code>就处理了所有代码，不过特别的模块需要特别执行，比如：<code>browserSync</code>模块</p>\n<p>github上练习代码：<a href=\"https://github.com/flyingpig2016/gulp-study.git\" target=\"_blank\" rel=\"external\">gulp-study</a></p>\n","comments":true,"categories":[],"tags":[{"name":"前端自动化工具","slug":"前端自动化工具","permalink":"//www.iambangbang.club/tags/前端自动化工具/"}]},{"title":"mongodb常用命令学习","date":"2017-07-02T08:23:25.000Z","path":"2017/07/02/mongodb常用命令学习/","content":"<h2 id=\"mongoDB常用命令\"><a href=\"#mongoDB常用命令\" class=\"headerlink\" title=\"mongoDB常用命令\"></a>mongoDB常用命令</h2><h3 id=\"1-展示数据库：show-dbs；\"><a href=\"#1-展示数据库：show-dbs；\" class=\"headerlink\" title=\"1. 展示数据库：show dbs；\"></a><strong>1. 展示数据库：</strong><code>show dbs</code>；</h3><h3 id=\"2-显示当前数据库对象或集合：db\"><a href=\"#2-显示当前数据库对象或集合：db\" class=\"headerlink\" title=\"2. 显示当前数据库对象或集合：db;\"></a><strong>2. 显示当前数据库对象或集合：</strong><code>db</code>;</h3><h3 id=\"3-连接到一个指定的数据库-use\"><a href=\"#3-连接到一个指定的数据库-use\" class=\"headerlink\" title=\"3. 连接到一个指定的数据库:  use;\"></a><strong>3. 连接到一个指定的数据库:</strong>  <code>use</code>;</h3><h3 id=\"4-关系型数据库和mongodb的术语：\"><a href=\"#4-关系型数据库和mongodb的术语：\" class=\"headerlink\" title=\"4. 关系型数据库和mongodb的术语：\"></a><strong>4. 关系型数据库和mongodb的术语：</strong></h3><p><img src=\"http://img.blog.csdn.net/20170610182030359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><a id=\"more\"></a></p>\n<h3 id=\"5-集合就是-MongoDB-文档组，类似于-RDBMS中的表格，例如：\"><a href=\"#5-集合就是-MongoDB-文档组，类似于-RDBMS中的表格，例如：\" class=\"headerlink\" title=\"5. 集合就是 MongoDB 文档组，类似于 RDBMS中的表格，例如：\"></a><strong>5. 集合就是 MongoDB 文档组，</strong>类似于 RDBMS中的表格，例如：</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">\"site\"</span>:<span class=\"string\">\"www.baidu.com\"</span>&#125;</div><div class=\"line\">&#123;<span class=\"attr\">\"site\"</span>:<span class=\"string\">\"www.google.com\"</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"Google\"</span>&#125;</div><div class=\"line\">&#123;<span class=\"attr\">\"site\"</span>:<span class=\"string\">\"www.runoob.com\"</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"菜鸟教程\"</span>,<span class=\"attr\">\"num\"</span>:<span class=\"number\">5</span>&#125;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p>\n<h3 id=\"6-创建myblog数据库：\"><a href=\"#6-创建myblog数据库：\" class=\"headerlink\" title=\"**6.创建myblog数据库：\"></a>**6.创建myblog数据库：</h3><p>**<code>use myblog</code>,此时还不能用<code>show dbs</code>来查看，因为没有数据。当我们插入数据的时候才能看到数据列表：<code>db.myblog.insert({name:&#39;bangbang&#39;})</code> ;</p>\n<h3 id=\"7-删除base02数据库：\"><a href=\"#7-删除base02数据库：\" class=\"headerlink\" title=\"7.删除base02数据库：\"></a><strong>7.删除base02数据库：</strong></h3><pre><code>首先，我们先创建一个base02数据库,并插入一条数据，**注意：要想显示数据库，需要至少插入一个文档进去。**\n</code></pre><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">use</span> <span class=\"selector-tag\">base02</span>;</div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.base02</span><span class=\"selector-class\">.insert</span>(&#123;<span class=\"attribute\">name</span>:<span class=\"string\">'qiqi'</span>&#125;); <span class=\"comment\">//插入一条数据</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.dropDatabase</span>();\t\t<span class=\"comment\">//删除数据库</span></div></pre></td></tr></table></figure>\n<h3 id=\"8-创建和删除集合：\"><a href=\"#8-创建和删除集合：\" class=\"headerlink\" title=\"8.创建和删除集合：\"></a><strong>8.创建和删除集合：</strong></h3><p>创建集合：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">use base02;</div><div class=\"line\">db.createCollection(<span class=\"string\">'mycollection'</span>); </div><div class=\"line\">show collections <span class=\"comment\">//使用show collections来检查创建的集合</span></div><div class=\"line\">db.createCollection(<span class=\"string\">\"mycol\"</span>, &#123; <span class=\"string\">capped :</span> <span class=\"literal\">true</span>, <span class=\"string\">autoIndexID :</span> <span class=\"literal\">true</span>, <span class=\"string\">size :</span> <span class=\"number\">6142800</span>, <span class=\"string\">max :</span> <span class=\"number\">10000</span> &#125; )<span class=\"comment\">//根据集合的规格创建</span></div></pre></td></tr></table></figure></p>\n<p>其实在MongoDB中并不需要创建集合。 当插入一些文档 MongoDB 会自动创建集合。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建集合mycol1</span></div><div class=\"line\">db<span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.insert</span>(&#123;name:<span class=\"string\">'bangbang'</span>&#125;)</div><div class=\"line\"><span class=\"comment\">//删除集合mycol1</span></div><div class=\"line\">db<span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.drop</span>()</div></pre></td></tr></table></figure></p>\n<h3 id=\"9-插入文档\"><a href=\"#9-插入文档\" class=\"headerlink\" title=\"9.插入文档\"></a><strong>9.插入文档</strong></h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.insert</span>(&#123;<span class=\"attribute\">name</span>:<span class=\"string\">'bangbang'</span>&#125;)</div></pre></td></tr></table></figure>\n<p>要以单个查询插入多个文档，可以通过文档 insert() 命令的数组方式<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var datas = [</div><div class=\"line\">\t&#123;title: <span class=\"symbol\">'MongoDB</span> Overview',     description: <span class=\"symbol\">'MongoDB</span> <span class=\"keyword\">is</span> no sql database',    by_user: <span class=\"symbol\">'runoob.com</span>',    url: <span class=\"symbol\">'http</span>:</div><div class=\"line\">//www.runoob.com',    tags: [<span class=\"symbol\">'mongodb</span>', <span class=\"symbol\">'database</span>', <span class=\"symbol\">'NoSQL</span>'],    likes: <span class=\"number\">100</span> &#125;, </div><div class=\"line\">\t&#123;title: <span class=\"symbol\">'NoSQL</span> Overview',     description: <span class=\"symbol\">'No</span> sql</div><div class=\"line\">database <span class=\"keyword\">is</span> very fast',    by_user: <span class=\"symbol\">'runoob.com</span>',    url: <span class=\"symbol\">'http</span>://www.runoob.com',    tags: [<span class=\"symbol\">'mongodb</span>', <span class=\"symbol\">'database</span>', <span class=\"symbol\">'NoSQL</span>'],    likes</div><div class=\"line\">: 10 &#125;, </div><div class=\"line\">\t&#123;title: <span class=\"symbol\">'Neo4j</span> Overview',     description: <span class=\"symbol\">'Neo4j</span> <span class=\"keyword\">is</span> no sql database',    by_user: <span class=\"symbol\">'Neo4j</span>',    url: <span class=\"symbol\">'http</span>://www.neo4j.com'</div><div class=\"line\">,    tags: [<span class=\"symbol\">'neo4j</span>', <span class=\"symbol\">'database</span>', <span class=\"symbol\">'NoSQL</span>'],    likes: <span class=\"number\">750</span> &#125;];</div><div class=\"line\">db.mycol1.insert(datas);</div></pre></td></tr></table></figure></p>\n<h3 id=\"10-查询文档\"><a href=\"#10-查询文档\" class=\"headerlink\" title=\"10.查询文档\"></a><strong>10.查询文档</strong></h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//格式化显示</span></div><div class=\"line\">db.mycol1.<span class=\"built_in\">find</span>().pretty();</div><div class=\"line\"><span class=\"comment\">//非格式化显示</span></div><div class=\"line\">db.mycol1.<span class=\"built_in\">find</span>();</div><div class=\"line\"><span class=\"comment\">//按照条件查找</span></div><div class=\"line\">db.mycol1.<span class=\"built_in\">find</span>(&#123;<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Neo4j Overview\"</span>&#125;)</div><div class=\"line\"><span class=\"comment\">//并列查找相当于and</span></div><div class=\"line\">db.mycol1.<span class=\"built_in\">find</span>(&#123;<span class=\"string\">\"title\"</span>:<span class=\"string\">\"Neo4j Overview\"</span>,<span class=\"string\">\"likes\"</span>:<span class=\"number\">750</span>&#125;)</div><div class=\"line\"><span class=\"comment\">//或查找，相当于or</span></div><div class=\"line\">db.mycol1.<span class=\"built_in\">find</span>(&#123;</div><div class=\"line\">\t\t$<span class=\"keyword\">or</span>:[&#123;likes:<span class=\"number\">10</span>&#125;,&#123;likes:<span class=\"number\">750</span>&#125;]</div><div class=\"line\">\t&#125;)</div><div class=\"line\"><span class=\"comment\">//联合查询</span></div><div class=\"line\">db.mycol1.<span class=\"built_in\">find</span>(&#123;likes:<span class=\"number\">10</span>,$<span class=\"keyword\">or</span>:[&#123;likes:<span class=\"number\">10</span>&#125;,&#123;likes:<span class=\"number\">750</span>&#125;]&#125;)</div></pre></td></tr></table></figure>\n<p><strong>11.更新文档</strong><br>&emsp;&emsp;update()方法将现有的文档中的值更新，而save()方法使用传递到save()方法的文档替换现有的文档。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//用update更新选中的文档</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.update</span>(&#123;<span class=\"attribute\">title</span>:<span class=\"string\">'MongoDB Overview'</span>&#125;,&#123;$<span class=\"attribute\">set</span>:&#123;<span class=\"attribute\">title</span>:<span class=\"string\">'bangbang'</span>,<span class=\"attribute\">job</span>:<span class=\"string\">'program'</span>&#125;&#125;)</div><div class=\"line\"><span class=\"comment\">//用save更新，也就是全部替换了_id为593df22dfafc15a3d4d9bfc4的文档</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.save</span>(&#123;<span class=\"attribute\">_id</span>:ObjectId(<span class=\"string\">\"593df22dfafc15a3d4d9bfc4\"</span>),<span class=\"attribute\">title</span>:<span class=\"string\">'qiqi'</span>,<span class=\"attribute\">description</span>:<span class=\"string\">'I am qiqi'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"12-删除文档\"><a href=\"#12-删除文档\" class=\"headerlink\" title=\"12.删除文档\"></a><strong>12.删除文档</strong></h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//删除所有标题为MongoDB Overview的文件</span></div><div class=\"line\">db<span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.remove</span>(&#123;</div><div class=\"line\"><span class=\"string\">'title'</span>:<span class=\"string\">'MongoDB Overview'</span>&#125;)</div><div class=\"line\"><span class=\"comment\">//只删除一个</span></div><div class=\"line\">db<span class=\"selector-class\">.mycoll1</span><span class=\"selector-class\">.remove</span>(&#123;<span class=\"string\">'title'</span>:<span class=\"string\">'MongoDB Overview'</span>&#125;,<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"comment\">//如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。</span></div><div class=\"line\">db<span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.remove</span>()</div></pre></td></tr></table></figure>\n<h3 id=\"13-MongoDB投影\"><a href=\"#13-MongoDB投影\" class=\"headerlink\" title=\"13.MongoDB投影\"></a><strong>13.MongoDB投影</strong></h3><p>&emsp;&emsp;mongodb投影意义是只选择需要的数据，而不是选择整个一个文档的数据。如果一个文档有5个字段，只需要显示3个，只从中选择3个字段。MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段.<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这里只显示title和description字段，不显示_id字段</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.find</span>(&#123;&#125;,&#123;<span class=\"attribute\">title</span>:<span class=\"number\">1</span>,<span class=\"attribute\">description</span>:<span class=\"number\">1</span>,<span class=\"attribute\">_id</span>:<span class=\"number\">0</span>&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"14-限制文档\"><a href=\"#14-限制文档\" class=\"headerlink\" title=\"14.限制文档\"></a><strong>14.限制文档</strong></h3><p>&emsp;&ems;要在MongoDB中限制记录，需要使用limit()方法。 limit() 方法接受一个数字类型的参数，这是要显示的文档数量<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//只显示两条数据</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.limit</span>(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">//只显示一条数据</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.find</span>(&#123;&#125;,&#123;<span class=\"attribute\">title</span>:<span class=\"number\">1</span>,<span class=\"attribute\">description</span>:<span class=\"number\">1</span>,<span class=\"attribute\">_id</span>:<span class=\"number\">0</span>&#125;)<span class=\"selector-class\">.limit</span>(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n<p>除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//跳过第一条显示全部</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.skip</span>(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">//跳过第一条显示两条数据</span></div><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.limit</span>(<span class=\"number\">2</span>)<span class=\"selector-class\">.skip</span>(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"15-文档排序\"><a href=\"#15-文档排序\" class=\"headerlink\" title=\"15.文档排序\"></a><strong>15.文档排序</strong></h3><p>&emsp;&emsp;要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol1</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.sort</span>(&#123;<span class=\"attribute\">likes</span>:<span class=\"number\">1</span>&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"16-MongoDB索引\"><a href=\"#16-MongoDB索引\" class=\"headerlink\" title=\"16.MongoDB索引\"></a><strong>16.MongoDB索引</strong></h3><p>索引是特殊的数据结构，存储在一个易于设置遍历形式的数据的一小部分。索引存储在索引中指定特定字段的值或一组字段，并排序字段的值。要创建索引，需要使用MongoDB的ensureIndex()方法。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">db</span><span class=\"selector-class\">.mycol2</span><span class=\"selector-class\">.ensureIndex</span>(&#123;<span class=\"attribute\">title</span>:<span class=\"number\">1</span>&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"17-MongoDB-聚合\"><a href=\"#17-MongoDB-聚合\" class=\"headerlink\" title=\"17.MongoDB 聚合\"></a><strong>17.MongoDB 聚合</strong></h3><p>&emsp;&emsp;聚合操作处理数据记录并返回计算结果。从多个文档聚合分组操作数值，并可以执行多种对分组数据业务返回一个结果。</p>\n<h3 id=\"18-复制\"><a href=\"#18-复制\" class=\"headerlink\" title=\"18.复制\"></a><strong>18.复制</strong></h3><p>&emsp;&emsp;复制是同步在多个服务器上的数据过程。复制提供了冗余和数据在不同的数据库服务器上的多个副本提高数据的可用性，复制防止在单个服务器上丢失数据库。 复制也可以从硬件故障和服务中断中恢复。带有数据的其他副本，可以选择其中一个灾难恢复，报告或备份。<br><a href=\"http://www.cnblogs.com/huangxincheng/archive/2012/03/04/2379755.html\" target=\"_blank\" rel=\"external\">主从复制</a></p>\n","comments":true,"categories":[],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"//www.iambangbang.club/tags/MongoDB/"}]},{"title":"resume","date":"2017-07-02T08:23:22.000Z","path":"2017/07/02/resume/","content":"","comments":true,"categories":[{"name":"resume","slug":"resume","permalink":"//www.iambangbang.club/categories/resume/"}],"tags":[]},{"title":"01note","date":"2017-06-22T15:18:54.000Z","path":"2017/06/22/01note/","content":"<p>这是我的note页面 </p>\n","comments":true,"categories":[],"tags":[{"name":"notes","slug":"notes","permalink":"//www.iambangbang.club/tags/notes/"}]}]