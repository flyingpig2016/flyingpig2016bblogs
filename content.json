[{"title":"深入理解prototyp","date":"2017-07-10T05:40:38.000Z","path":"2017/07/10/深入理解prototyp/","content":"<h2 id=\"对JavaScript中原型模式的理解\"><a href=\"#对JavaScript中原型模式的理解\" class=\"headerlink\" title=\"对JavaScript中原型模式的理解\"></a>对JavaScript中原型模式的理解</h2><h3 id=\"一：什么是原型对象？有什么优点？\"><a href=\"#一：什么是原型对象？有什么优点？\" class=\"headerlink\" title=\"一：什么是原型对象？有什么优点？**\"></a>一：什么是原型对象？有什么优点？**</h3><p>&emsp;&emsp; 简单的来说，无论何时，我们创建的每一个函数都有一个prototype属性，这个属性是一个指针，指向一个对象，这个对象包含了通过调用该构造函数所创建的对象共享的属性和方法。其实我们平常的叫法就是指：<strong>prototype就是通过该构造函数创建的某个实例的原型对象</strong>，但是其实prototype是每个构造函数的属性而已，只能说万物皆对象罢了。<br>&emsp;&emsp; 原型对象的优点是：所有的对象实例都可以共享它包含的属性和方法。这一点可以在构造函数里就可以看出来，因为构造函数在函数里面就定义了对象的实例信息，而原型对象可以在任何地方定义属性和方法。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">Person.prototype.name = <span class=\"string\">'bangbang'</span>;</div><div class=\"line\">Person.prototype.age = <span class=\"number\">18</span>;</div><div class=\"line\">Person.prototype.job = <span class=\"string\">'programmer'</span>;</div><div class=\"line\">Person.prototype.dream = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Change yourself'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">person1.dream();\t<span class=\"comment\">//Change yourself</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">person2.dream();</div><div class=\"line\"><span class=\"comment\">//判断两个实例继承的方法和属性是否全等</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.dream === person2.dream);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.age === person2.age);</div></pre></td></tr></table></figure></p>\n<p>由以上的代码可以看出它比构造函数方法的好处就是，person1和person2访问的都是同一个dream()函数，即他们的属性和方法都是共享的。<br><a id=\"more\"></a></p>\n<h3 id=\"二：深入理解原型对象和prototype？\"><a href=\"#二：深入理解原型对象和prototype？\" class=\"headerlink\" title=\"二：深入理解原型对象和prototype？**\"></a>二：深入理解原型对象和prototype？**</h3><p>&emsp;&emsp;由上面可知，我们创建了一个函数，就会根据ECMAscript特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个constructor(构造函数)属性，这个属性是一个指向prototype属性所在函数的指针。就像前面的例子，Person.prototype.constructor指向Person，而通过这个构造函数，我们还可以继续为原型对象添加其他属性和方法。<br>&emsp;&emsp;下面，我们就开始从原理上说明上面代码运行机制的：</p>\n<ol>\n<li>创建一个自定义的构造函数后，它的原型对象默认只会有constructor属性，其他属性和方法都是从Object继承而来的；</li>\n<li>当调用构造函数创建一个新实例后，该实例的内部将包含一个指针，指向构造函数的原型对象。ECMA5中称这个指针叫[[prototype]]。虽然在脚本中没有标准的方式访问[[prototype]]，但Firefox、Safari和Chrome在每个对象上都支持一个属性<em>proto</em>;而在其他浏览器中，这个属性则是完全不可见的。不过要明确的真正一点就是，这个连接存在于 <strong>实例</strong> 和 <strong>构造函数的原型对象</strong> 之间，而不是存在于实例和构造函数之间，用前面使用Person构造函数和Person.prototype创建实例的代码为例，各个对象之间的关系如下图所示：<br><img src=\"http://img.blog.csdn.net/20170514170752175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>&emsp;&emsp;上图展示了Person构造函数、Person的原型以及Person现有的两个实例之间的关系，再次，Person.prototype指向了原型对象，而Person.prototype.constructor又指回了Person。原型对象中除了包含constructor属性之外，还包括后来添加的其他属性。Person的每个实例——person1和person2都包含一个内部属性，该属性指向了Person.prototype；换句话说，他们与构造函数没有直接关系。<br>&emsp;&emsp;注意：虽然这两个实例都不包含属性和方法，但我们却可以调用name、age、job、dream()方法和属性，这是通过查找对象属性的过程来实现的。<br>&emsp;&emsp;虽然我们不能访问到[[prototype]]，但可以通过isPrototypeOf()方法来确定对象之间是否存在这种关系。因为这两个实例都有一个指向Person.prototype的指针，因此，都返回true如下所示：<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">console</span>.log(<span class=\"type\">Person</span>.proto<span class=\"keyword\">type</span>.isPrototypeOf(person1));//true</div><div class=\"line\"><span class=\"title\">console</span>.log(<span class=\"type\">Person</span>.proto<span class=\"keyword\">type</span>.isPrototypeOf(person2));//true</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>ECMA5增加了一个方法，叫Object.getPrototypeOf(),这个方法返回[[Prototype]]的值,也就是括号里面对象的原型，例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(person1) == Person.prototype; <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(person1).name); <span class=\"comment\">//'bangbang'</span></div></pre></td></tr></table></figure></p>\n<p>用hasOwnProperty()方法可以检测一个属性是存在于实例中还是原型中。还是上面的例子：</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.hasOwnProperty(<span class=\"string\">'name'</span>); <span class=\"comment\">//false</span></div><div class=\"line\">person1.<span class=\"built_in\">name</span> = <span class=\"string\">'qiqi'</span>;</div><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.hasOwnProperty(<span class=\"string\">'name'</span>); <span class=\"comment\">//true —— 来自实例</span></div><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.<span class=\"built_in\">name</span>);  <span class=\"comment\">//'qiqi' ——来自实例</span></div><div class=\"line\">delete person1.<span class=\"built_in\">name</span>;</div><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.<span class=\"built_in\">name</span>); <span class=\"comment\">//'bangbang' —— 来自原型</span></div><div class=\"line\">console.<span class=\"built_in\">log</span>(person1.hasOwnProperty(<span class=\"string\">'name'</span>); <span class=\"comment\">//true ——来自原型</span></div></pre></td></tr></table></figure>\n<p>当我们为person1添加name属性的时候，如下图图所示：<br><img src=\"http://img.blog.csdn.net/20170514170806065?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmx5aW5ncGlnMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h3 id=\"三：组合使用构造函数模式和原型模式优点最多：\"><a href=\"#三：组合使用构造函数模式和原型模式优点最多：\" class=\"headerlink\" title=\"三：组合使用构造函数模式和原型模式优点最多：**\"></a>三：组合使用构造函数模式和原型模式优点最多：**</h3><p>&emsp;&emsp;以上我讲述了用构造函数生成对象的原理以及生成的对象和原型对象之间的关系，原理了解了这么多，我么当然需要知道怎么在合适的时候用他们。创建自定义类型的最常见方式就是组合使用构造函数模式和原型模式。构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。每个实例都会有自己的一份实例属性的副本，但同时又共享着对方发的引用，最大限度的节省了内存。如下例所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age,job</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.job = job;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.love = [<span class=\"string\">'qiqi'</span>,<span class=\"string\">'lili'</span>];</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">\t<span class=\"attr\">constructor</span> : Person,</div><div class=\"line\">\t<span class=\"attr\">dream</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.love[<span class=\"number\">0</span>]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'bangbang'</span>,<span class=\"number\">18</span>,<span class=\"string\">'programmer'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'xiaoya'</span>,<span class=\"number\">18</span>,<span class=\"string\">'teacher'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.love);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(person2.love)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.love === person2.love);  <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"comment\">//给person1的love属性添加元素</span></div><div class=\"line\">person1.love.push(<span class=\"string\">'niuniu'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.love)  <span class=\"comment\">//[\"qiqi\", \"lili\", \"niuniu\"]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(person2.love)  <span class=\"comment\">//[\"qiqi\", \"lili\"]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.love === person2.love);  <span class=\"comment\">//false</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(person1.dream === person2.dream);<span class=\"comment\">//true</span></div></pre></td></tr></table></figure></p>\n<p>以上这种模式是ECMAscript中使用最广泛的，认同度最高的，优点最多的创建自定义类型的方法，也就是创建JavaScript中类的方法。</p>\n","comments":true,"categories":[],"tags":[{"name":"javascript高级程序设计","slug":"javascript高级程序设计","permalink":"//flyingpig2016.github.io/tags/javascript高级程序设计/"}]},{"title":"01note","date":"2017-06-22T15:18:54.000Z","path":"2017/06/22/01note/","content":"<p>这是我的note页面 </p>\n","comments":true,"categories":[],"tags":[{"name":"notes","slug":"notes","permalink":"//flyingpig2016.github.io/tags/notes/"}]}]